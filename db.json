{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/overdose/source/css/index.css","path":"css/index.css","modified":1,"renderable":1},{"_id":"themes/overdose/source/css/layout.scss","path":"css/layout.scss","modified":1,"renderable":1},{"_id":"themes/overdose/source/images/avatar.jpg","path":"images/avatar.jpg","modified":1,"renderable":1},{"_id":"themes/overdose/source/images/avatar.png","path":"images/avatar.png","modified":1,"renderable":1},{"_id":"themes/overdose/source/images/default.jpg","path":"images/default.jpg","modified":1,"renderable":1},{"_id":"themes/overdose/source/images/icon.png","path":"images/icon.png","modified":1,"renderable":1},{"_id":"themes/overdose/source/images/logo.png","path":"images/logo.png","modified":1,"renderable":1},{"_id":"themes/overdose/source/images/mock-up.png","path":"images/mock-up.png","modified":1,"renderable":1},{"_id":"themes/overdose/source/js/classList.min.js","path":"js/classList.min.js","modified":1,"renderable":1},{"_id":"themes/overdose/source/js/dynamicMenu.js","path":"js/dynamicMenu.js","modified":1,"renderable":1},{"_id":"themes/overdose/source/js/dynamicMenu.min.js","path":"js/dynamicMenu.min.js","modified":1,"renderable":1},{"_id":"themes/overdose/source/js/index.min.js","path":"js/index.min.js","modified":1,"renderable":1},{"_id":"themes/overdose/source/js/sharer.js","path":"js/sharer.js","modified":1,"renderable":1},{"_id":"themes/overdose/source/js/sharer.min.js","path":"js/sharer.min.js","modified":1,"renderable":1},{"_id":"themes/overdose/source/css/highlights/agate.css","path":"css/highlights/agate.css","modified":1,"renderable":1},{"_id":"themes/overdose/source/css/highlights/androidstudio.css","path":"css/highlights/androidstudio.css","modified":1,"renderable":1},{"_id":"themes/overdose/source/css/highlights/arduino-light.css","path":"css/highlights/arduino-light.css","modified":1,"renderable":1},{"_id":"themes/overdose/source/css/highlights/arta.css","path":"css/highlights/arta.css","modified":1,"renderable":1},{"_id":"themes/overdose/source/css/highlights/ascetic.css","path":"css/highlights/ascetic.css","modified":1,"renderable":1},{"_id":"themes/overdose/source/css/highlights/atelier-cave-dark.css","path":"css/highlights/atelier-cave-dark.css","modified":1,"renderable":1},{"_id":"themes/overdose/source/css/highlights/atelier-cave-light.css","path":"css/highlights/atelier-cave-light.css","modified":1,"renderable":1},{"_id":"themes/overdose/source/css/highlights/atelier-dune-dark.css","path":"css/highlights/atelier-dune-dark.css","modified":1,"renderable":1},{"_id":"themes/overdose/source/css/highlights/atelier-dune-light.css","path":"css/highlights/atelier-dune-light.css","modified":1,"renderable":1},{"_id":"themes/overdose/source/css/highlights/atelier-estuary-dark.css","path":"css/highlights/atelier-estuary-dark.css","modified":1,"renderable":1},{"_id":"themes/overdose/source/css/highlights/atelier-estuary-light.css","path":"css/highlights/atelier-estuary-light.css","modified":1,"renderable":1},{"_id":"themes/overdose/source/css/highlights/atelier-forest-dark.css","path":"css/highlights/atelier-forest-dark.css","modified":1,"renderable":1},{"_id":"themes/overdose/source/css/highlights/atelier-forest-light.css","path":"css/highlights/atelier-forest-light.css","modified":1,"renderable":1},{"_id":"themes/overdose/source/css/highlights/atelier-heath-dark.css","path":"css/highlights/atelier-heath-dark.css","modified":1,"renderable":1},{"_id":"themes/overdose/source/css/highlights/atelier-heath-light.css","path":"css/highlights/atelier-heath-light.css","modified":1,"renderable":1},{"_id":"themes/overdose/source/css/highlights/atelier-lakeside-dark.css","path":"css/highlights/atelier-lakeside-dark.css","modified":1,"renderable":1},{"_id":"themes/overdose/source/css/highlights/atelier-lakeside-light.css","path":"css/highlights/atelier-lakeside-light.css","modified":1,"renderable":1},{"_id":"themes/overdose/source/css/highlights/atelier-plateau-dark.css","path":"css/highlights/atelier-plateau-dark.css","modified":1,"renderable":1},{"_id":"themes/overdose/source/css/highlights/atelier-plateau-light.css","path":"css/highlights/atelier-plateau-light.css","modified":1,"renderable":1},{"_id":"themes/overdose/source/css/highlights/atelier-savanna-dark.css","path":"css/highlights/atelier-savanna-dark.css","modified":1,"renderable":1},{"_id":"themes/overdose/source/css/highlights/atelier-savanna-light.css","path":"css/highlights/atelier-savanna-light.css","modified":1,"renderable":1},{"_id":"themes/overdose/source/css/highlights/atelier-seaside-light.css","path":"css/highlights/atelier-seaside-light.css","modified":1,"renderable":1},{"_id":"themes/overdose/source/css/highlights/atelier-sulphurpool-dark.css","path":"css/highlights/atelier-sulphurpool-dark.css","modified":1,"renderable":1},{"_id":"themes/overdose/source/css/highlights/atelier-seaside-dark.css","path":"css/highlights/atelier-seaside-dark.css","modified":1,"renderable":1},{"_id":"themes/overdose/source/css/highlights/atelier-sulphurpool-light.css","path":"css/highlights/atelier-sulphurpool-light.css","modified":1,"renderable":1},{"_id":"themes/overdose/source/css/highlights/atom-one-light.css","path":"css/highlights/atom-one-light.css","modified":1,"renderable":1},{"_id":"themes/overdose/source/css/highlights/atom-one-dark.css","path":"css/highlights/atom-one-dark.css","modified":1,"renderable":1},{"_id":"themes/overdose/source/css/highlights/brown-papersq.png","path":"css/highlights/brown-papersq.png","modified":1,"renderable":1},{"_id":"themes/overdose/source/css/highlights/brown-paper.css","path":"css/highlights/brown-paper.css","modified":1,"renderable":1},{"_id":"themes/overdose/source/css/highlights/codepen-embed.css","path":"css/highlights/codepen-embed.css","modified":1,"renderable":1},{"_id":"themes/overdose/source/css/highlights/color-brewer.css","path":"css/highlights/color-brewer.css","modified":1,"renderable":1},{"_id":"themes/overdose/source/css/highlights/dark.css","path":"css/highlights/dark.css","modified":1,"renderable":1},{"_id":"themes/overdose/source/css/highlights/darkula.css","path":"css/highlights/darkula.css","modified":1,"renderable":1},{"_id":"themes/overdose/source/css/highlights/docco.css","path":"css/highlights/docco.css","modified":1,"renderable":1},{"_id":"themes/overdose/source/css/highlights/dracula.css","path":"css/highlights/dracula.css","modified":1,"renderable":1},{"_id":"themes/overdose/source/css/highlights/far.css","path":"css/highlights/far.css","modified":1,"renderable":1},{"_id":"themes/overdose/source/css/highlights/foundation.css","path":"css/highlights/foundation.css","modified":1,"renderable":1},{"_id":"themes/overdose/source/css/highlights/github-gist.css","path":"css/highlights/github-gist.css","modified":1,"renderable":1},{"_id":"themes/overdose/source/css/highlights/github.css","path":"css/highlights/github.css","modified":1,"renderable":1},{"_id":"themes/overdose/source/css/highlights/googlecode.css","path":"css/highlights/googlecode.css","modified":1,"renderable":1},{"_id":"themes/overdose/source/css/highlights/grayscale.css","path":"css/highlights/grayscale.css","modified":1,"renderable":1},{"_id":"themes/overdose/source/css/highlights/highlightjs.css","path":"css/highlights/highlightjs.css","modified":1,"renderable":1},{"_id":"themes/overdose/source/css/highlights/hopscotch.css","path":"css/highlights/hopscotch.css","modified":1,"renderable":1},{"_id":"themes/overdose/source/css/highlights/hybrid.css","path":"css/highlights/hybrid.css","modified":1,"renderable":1},{"_id":"themes/overdose/source/css/highlights/idea.css","path":"css/highlights/idea.css","modified":1,"renderable":1},{"_id":"themes/overdose/source/css/highlights/ir-black.css","path":"css/highlights/ir-black.css","modified":1,"renderable":1},{"_id":"themes/overdose/source/css/highlights/kimbie-dark.css","path":"css/highlights/kimbie-dark.css","modified":1,"renderable":1},{"_id":"themes/overdose/source/css/highlights/kimbie-light.css","path":"css/highlights/kimbie-light.css","modified":1,"renderable":1},{"_id":"themes/overdose/source/css/highlights/magula.css","path":"css/highlights/magula.css","modified":1,"renderable":1},{"_id":"themes/overdose/source/css/highlights/mono-blue.css","path":"css/highlights/mono-blue.css","modified":1,"renderable":1},{"_id":"themes/overdose/source/css/highlights/monokai-sublime.css","path":"css/highlights/monokai-sublime.css","modified":1,"renderable":1},{"_id":"themes/overdose/source/css/highlights/monokai.css","path":"css/highlights/monokai.css","modified":1,"renderable":1},{"_id":"themes/overdose/source/css/highlights/obsidian.css","path":"css/highlights/obsidian.css","modified":1,"renderable":1},{"_id":"themes/overdose/source/css/highlights/paraiso-dark.css","path":"css/highlights/paraiso-dark.css","modified":1,"renderable":1},{"_id":"themes/overdose/source/css/highlights/paraiso-light.css","path":"css/highlights/paraiso-light.css","modified":1,"renderable":1},{"_id":"themes/overdose/source/css/highlights/pojoaque.css","path":"css/highlights/pojoaque.css","modified":1,"renderable":1},{"_id":"themes/overdose/source/css/highlights/pojoaque.jpg","path":"css/highlights/pojoaque.jpg","modified":1,"renderable":1},{"_id":"themes/overdose/source/css/highlights/railscasts.css","path":"css/highlights/railscasts.css","modified":1,"renderable":1},{"_id":"themes/overdose/source/css/highlights/rainbow.css","path":"css/highlights/rainbow.css","modified":1,"renderable":1},{"_id":"themes/overdose/source/css/highlights/school-book.css","path":"css/highlights/school-book.css","modified":1,"renderable":1},{"_id":"themes/overdose/source/css/highlights/school-book.png","path":"css/highlights/school-book.png","modified":1,"renderable":1},{"_id":"themes/overdose/source/css/highlights/solarized-dark.css","path":"css/highlights/solarized-dark.css","modified":1,"renderable":1},{"_id":"themes/overdose/source/css/highlights/solarized-light.css","path":"css/highlights/solarized-light.css","modified":1,"renderable":1},{"_id":"themes/overdose/source/css/highlights/sunburst.css","path":"css/highlights/sunburst.css","modified":1,"renderable":1},{"_id":"themes/overdose/source/css/highlights/tomorrow-night-blue.css","path":"css/highlights/tomorrow-night-blue.css","modified":1,"renderable":1},{"_id":"themes/overdose/source/css/highlights/tomorrow-night-bright.css","path":"css/highlights/tomorrow-night-bright.css","modified":1,"renderable":1},{"_id":"themes/overdose/source/css/highlights/tomorrow-night-eighties.css","path":"css/highlights/tomorrow-night-eighties.css","modified":1,"renderable":1},{"_id":"themes/overdose/source/css/highlights/tomorrow-night.css","path":"css/highlights/tomorrow-night.css","modified":1,"renderable":1},{"_id":"themes/overdose/source/css/highlights/tomorrow.css","path":"css/highlights/tomorrow.css","modified":1,"renderable":1},{"_id":"themes/overdose/source/css/highlights/vs.css","path":"css/highlights/vs.css","modified":1,"renderable":1},{"_id":"themes/overdose/source/css/highlights/xcode.css","path":"css/highlights/xcode.css","modified":1,"renderable":1},{"_id":"themes/overdose/source/css/highlights/zenburn.css","path":"css/highlights/zenburn.css","modified":1,"renderable":1},{"_id":"themes/overdose/source/libs/font-awesome/HELP-US-OUT.txt","path":"libs/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/overdose/source/libs/font-awesome/README.md","path":"libs/font-awesome/README.md","modified":1,"renderable":1},{"_id":"themes/overdose/source/libs/font-awesome/package.json","path":"libs/font-awesome/package.json","modified":1,"renderable":1},{"_id":"themes/overdose/source/libs/spoqa-han-sans-jp/LICENSE","path":"libs/spoqa-han-sans-jp/LICENSE","modified":1,"renderable":1},{"_id":"themes/overdose/source/libs/spoqa-han-sans-jp/README.md","path":"libs/spoqa-han-sans-jp/README.md","modified":1,"renderable":1},{"_id":"themes/overdose/source/libs/spoqa-han-sans-kr/LICENSE","path":"libs/spoqa-han-sans-kr/LICENSE","modified":1,"renderable":1},{"_id":"themes/overdose/source/libs/spoqa-han-sans-kr/README.md","path":"libs/spoqa-han-sans-kr/README.md","modified":1,"renderable":1},{"_id":"themes/overdose/source/libs/font-awesome/css/font-awesome.css","path":"libs/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/overdose/source/libs/font-awesome/css/font-awesome.min.css","path":"libs/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/overdose/source/libs/font-awesome/css/font-awesome.css.map","path":"libs/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/overdose/source/libs/font-awesome/fonts/FontAwesome.otf","path":"libs/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/overdose/source/libs/font-awesome/fonts/fontawesome-webfont.eot","path":"libs/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/overdose/source/libs/font-awesome/fonts/fontawesome-webfont.woff","path":"libs/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/overdose/source/libs/font-awesome/fonts/fontawesome-webfont.svg","path":"libs/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1},{"_id":"themes/overdose/source/libs/font-awesome/fonts/fontawesome-webfont.ttf","path":"libs/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/overdose/source/libs/font-awesome/fonts/fontawesome-webfont.woff2","path":"libs/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/overdose/source/libs/font-awesome/less/animated.less","path":"libs/font-awesome/less/animated.less","modified":1,"renderable":1},{"_id":"themes/overdose/source/libs/font-awesome/less/fixed-width.less","path":"libs/font-awesome/less/fixed-width.less","modified":1,"renderable":1},{"_id":"themes/overdose/source/libs/font-awesome/less/core.less","path":"libs/font-awesome/less/core.less","modified":1,"renderable":1},{"_id":"themes/overdose/source/libs/font-awesome/less/bordered-pulled.less","path":"libs/font-awesome/less/bordered-pulled.less","modified":1,"renderable":1},{"_id":"themes/overdose/source/libs/font-awesome/less/font-awesome.less","path":"libs/font-awesome/less/font-awesome.less","modified":1,"renderable":1},{"_id":"themes/overdose/source/libs/font-awesome/less/icons.less","path":"libs/font-awesome/less/icons.less","modified":1,"renderable":1},{"_id":"themes/overdose/source/libs/font-awesome/less/larger.less","path":"libs/font-awesome/less/larger.less","modified":1,"renderable":1},{"_id":"themes/overdose/source/libs/font-awesome/less/list.less","path":"libs/font-awesome/less/list.less","modified":1,"renderable":1},{"_id":"themes/overdose/source/libs/font-awesome/less/mixins.less","path":"libs/font-awesome/less/mixins.less","modified":1,"renderable":1},{"_id":"themes/overdose/source/libs/font-awesome/less/path.less","path":"libs/font-awesome/less/path.less","modified":1,"renderable":1},{"_id":"themes/overdose/source/libs/font-awesome/less/rotated-flipped.less","path":"libs/font-awesome/less/rotated-flipped.less","modified":1,"renderable":1},{"_id":"themes/overdose/source/libs/font-awesome/less/screen-reader.less","path":"libs/font-awesome/less/screen-reader.less","modified":1,"renderable":1},{"_id":"themes/overdose/source/libs/font-awesome/less/stacked.less","path":"libs/font-awesome/less/stacked.less","modified":1,"renderable":1},{"_id":"themes/overdose/source/libs/font-awesome/less/variables.less","path":"libs/font-awesome/less/variables.less","modified":1,"renderable":1},{"_id":"themes/overdose/source/libs/font-awesome/scss/font-awesome.scss","path":"libs/font-awesome/scss/font-awesome.scss","modified":1,"renderable":1},{"_id":"themes/overdose/source/libs/spoqa-han-sans-jp/css/SpoqaHanSans-jp.css","path":"libs/spoqa-han-sans-jp/css/SpoqaHanSans-jp.css","modified":1,"renderable":1},{"_id":"themes/overdose/source/libs/spoqa-han-sans-kr/css/SpoqaHanSans-kr.css","path":"libs/spoqa-han-sans-kr/css/SpoqaHanSans-kr.css","modified":1,"renderable":1},{"_id":"themes/overdose/source/libs/spoqa-han-sans-jp/fonts/SpoqaHanSans_JP/LICENSE","path":"libs/spoqa-han-sans-jp/fonts/SpoqaHanSans_JP/LICENSE","modified":1,"renderable":1},{"_id":"themes/overdose/source/libs/spoqa-han-sans-jp/fonts/SpoqaHanSans_JP/LICENSE_OFL.txt","path":"libs/spoqa-han-sans-jp/fonts/SpoqaHanSans_JP/LICENSE_OFL.txt","modified":1,"renderable":1},{"_id":"themes/overdose/source/libs/spoqa-han-sans-jp/fonts/SpoqaHanSans_JP/SpoqaHanSansJPBold.woff","path":"libs/spoqa-han-sans-jp/fonts/SpoqaHanSans_JP/SpoqaHanSansJPBold.woff","modified":1,"renderable":1},{"_id":"themes/overdose/source/libs/spoqa-han-sans-jp/fonts/SpoqaHanSans_JP/SpoqaHanSansJPBold.woff2","path":"libs/spoqa-han-sans-jp/fonts/SpoqaHanSans_JP/SpoqaHanSansJPBold.woff2","modified":1,"renderable":1},{"_id":"themes/overdose/source/libs/spoqa-han-sans-jp/fonts/SpoqaHanSans_JP/SpoqaHanSansJPLight.woff","path":"libs/spoqa-han-sans-jp/fonts/SpoqaHanSans_JP/SpoqaHanSansJPLight.woff","modified":1,"renderable":1},{"_id":"themes/overdose/source/libs/spoqa-han-sans-jp/fonts/SpoqaHanSans_JP/SpoqaHanSansJPLight.woff2","path":"libs/spoqa-han-sans-jp/fonts/SpoqaHanSans_JP/SpoqaHanSansJPLight.woff2","modified":1,"renderable":1},{"_id":"themes/overdose/source/libs/spoqa-han-sans-jp/fonts/SpoqaHanSans_JP/SpoqaHanSansJPRegular.woff","path":"libs/spoqa-han-sans-jp/fonts/SpoqaHanSans_JP/SpoqaHanSansJPRegular.woff","modified":1,"renderable":1},{"_id":"themes/overdose/source/libs/spoqa-han-sans-jp/fonts/SpoqaHanSans_JP/SpoqaHanSansJPRegular.woff2","path":"libs/spoqa-han-sans-jp/fonts/SpoqaHanSans_JP/SpoqaHanSansJPRegular.woff2","modified":1,"renderable":1},{"_id":"themes/overdose/source/libs/spoqa-han-sans-jp/fonts/SpoqaHanSans_JP/SpoqaHanSansJPThin.woff","path":"libs/spoqa-han-sans-jp/fonts/SpoqaHanSans_JP/SpoqaHanSansJPThin.woff","modified":1,"renderable":1},{"_id":"themes/overdose/source/libs/spoqa-han-sans-jp/fonts/SpoqaHanSans_JP/SpoqaHanSansJPThin.woff2","path":"libs/spoqa-han-sans-jp/fonts/SpoqaHanSans_JP/SpoqaHanSansJPThin.woff2","modified":1,"renderable":1},{"_id":"themes/overdose/source/libs/spoqa-han-sans-jp/fonts/SpoqaHanSans_JP/glyphs.txt","path":"libs/spoqa-han-sans-jp/fonts/SpoqaHanSans_JP/glyphs.txt","modified":1,"renderable":1},{"_id":"themes/overdose/source/libs/spoqa-han-sans-kr/fonts/SpoqaHanSans/LICENSE","path":"libs/spoqa-han-sans-kr/fonts/SpoqaHanSans/LICENSE","modified":1,"renderable":1},{"_id":"themes/overdose/source/libs/spoqa-han-sans-kr/fonts/SpoqaHanSans/LICENSE_OFL.txt","path":"libs/spoqa-han-sans-kr/fonts/SpoqaHanSans/LICENSE_OFL.txt","modified":1,"renderable":1},{"_id":"themes/overdose/source/libs/spoqa-han-sans-kr/fonts/SpoqaHanSans/SpoqaHanSansBold.woff","path":"libs/spoqa-han-sans-kr/fonts/SpoqaHanSans/SpoqaHanSansBold.woff","modified":1,"renderable":1},{"_id":"themes/overdose/source/libs/spoqa-han-sans-kr/fonts/SpoqaHanSans/SpoqaHanSansBold.woff2","path":"libs/spoqa-han-sans-kr/fonts/SpoqaHanSans/SpoqaHanSansBold.woff2","modified":1,"renderable":1},{"_id":"themes/overdose/source/libs/spoqa-han-sans-kr/fonts/SpoqaHanSans/SpoqaHanSansLight.woff","path":"libs/spoqa-han-sans-kr/fonts/SpoqaHanSans/SpoqaHanSansLight.woff","modified":1,"renderable":1},{"_id":"themes/overdose/source/libs/spoqa-han-sans-kr/fonts/SpoqaHanSans/SpoqaHanSansLight.woff2","path":"libs/spoqa-han-sans-kr/fonts/SpoqaHanSans/SpoqaHanSansLight.woff2","modified":1,"renderable":1},{"_id":"themes/overdose/source/libs/spoqa-han-sans-kr/fonts/SpoqaHanSans/SpoqaHanSansRegular.woff","path":"libs/spoqa-han-sans-kr/fonts/SpoqaHanSans/SpoqaHanSansRegular.woff","modified":1,"renderable":1},{"_id":"themes/overdose/source/libs/spoqa-han-sans-kr/fonts/SpoqaHanSans/SpoqaHanSansRegular.woff2","path":"libs/spoqa-han-sans-kr/fonts/SpoqaHanSans/SpoqaHanSansRegular.woff2","modified":1,"renderable":1},{"_id":"themes/overdose/source/libs/spoqa-han-sans-kr/fonts/SpoqaHanSans/SpoqaHanSansThin.woff","path":"libs/spoqa-han-sans-kr/fonts/SpoqaHanSans/SpoqaHanSansThin.woff","modified":1,"renderable":1},{"_id":"themes/overdose/source/libs/spoqa-han-sans-kr/fonts/SpoqaHanSans/SpoqaHanSansThin.woff2","path":"libs/spoqa-han-sans-kr/fonts/SpoqaHanSans/SpoqaHanSansThin.woff2","modified":1,"renderable":1},{"_id":"themes/overdose/source/libs/spoqa-han-sans-kr/fonts/SpoqaHanSans/glyphs.txt","path":"libs/spoqa-han-sans-kr/fonts/SpoqaHanSans/glyphs.txt","modified":1,"renderable":1}],"Cache":[{"_id":"source/_posts/Zapier-Screenshots-How-To-Take-Screenshots-With-Zapier.md","hash":"43ca1102006d05bef7b342b385f81463c6a80822","modified":1560197973000},{"_id":"source/_posts/how-to-build-a-ctracker.md","hash":"3c04a2cd6653ce2c63cef98193b84185fb5fdf5d","modified":1603471292538},{"_id":"source/_posts/why-you-shouldnt-build-your-own-puppeteer-screenshot.md","hash":"dbfe5c48f6b50d8d8455b489dce373f2c7fa4c75","modified":1551252528000},{"_id":"source/.DS_Store","hash":"38246f212eeff709a0911eec644ab2b74a72a5bf","modified":1560293441000},{"_id":"source/_drafts/.DS_Store","hash":"f6183517f6f9c5f875ffc3b5713c936f564de3d2","modified":1551329683000},{"_id":"source/_posts/how-to-build-a-ctracker/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1551160662000},{"_id":"source/_posts/.DS_Store","hash":"8dbbe85d33634f42666eba840879bba2338cf41d","modified":1551329683000},{"_id":"source/_posts/how-to-build-a-ctracker/download-3.png","hash":"4d1cfbb4f6e43bafb0a56948c89b0cf3b9b9beb1","modified":1551251366000},{"_id":"source/_posts/why-you-shouldnt-build-your-own-puppeteer-screenshot/download.png","hash":"0db278376fed7418eb474e3e78cb31dfb9c696dd","modified":1551251738000},{"_id":"source/_posts/how-to-build-a-ctracker/download-1.png","hash":"534f8629f25a22f8555e879308ab67ca37482119","modified":1551251249000},{"_id":"source/_posts/how-to-build-a-ctracker/download.png","hash":"e0b9105d57f82974b493d44d4a83bc86ff6ac186","modified":1551160315000},{"_id":"source/_posts/how-to-build-a-ctracker/download1.png","hash":"084070975ada0a012c750123bb95f7c6cfdb7151","modified":1551159773000},{"_id":"source/_posts/how-to-build-a-ctracker/download-2.png","hash":"06ff6702ad8b7da1e8a83da7bcd85f6412498bd0","modified":1551160649000},{"_id":"themes/overdose/source/libs/spoqa-han-sans-jp/fonts/SpoqaHanSans_JP/SpoqaHanSansJPBold.woff","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1551162362000},{"_id":"themes/overdose/source/libs/spoqa-han-sans-jp/fonts/SpoqaHanSans_JP/SpoqaHanSansJPBold.woff2","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1551162362000},{"_id":"themes/overdose/source/libs/spoqa-han-sans-jp/fonts/SpoqaHanSans_JP/SpoqaHanSansJPLight.woff","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1551162362000},{"_id":"themes/overdose/source/libs/spoqa-han-sans-jp/fonts/SpoqaHanSans_JP/SpoqaHanSansJPLight.woff2","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1551162362000},{"_id":"themes/overdose/source/libs/spoqa-han-sans-jp/fonts/SpoqaHanSans_JP/SpoqaHanSansJPRegular.woff","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1551162362000},{"_id":"themes/overdose/source/libs/spoqa-han-sans-jp/fonts/SpoqaHanSans_JP/SpoqaHanSansJPRegular.woff2","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1551162362000},{"_id":"themes/overdose/source/libs/spoqa-han-sans-jp/fonts/SpoqaHanSans_JP/SpoqaHanSansJPThin.woff","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1551162362000},{"_id":"themes/overdose/source/libs/spoqa-han-sans-jp/fonts/SpoqaHanSans_JP/SpoqaHanSansJPThin.woff2","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1551162362000},{"_id":"themes/overdose/LICENSE","hash":"8e13bf6f2717d3eb3d720ffe3a6491126943f57d","modified":1551162362000},{"_id":"themes/overdose/README.md","hash":"b196d4848195c8a6b046421fe02ad7481a0aac27","modified":1551162362000},{"_id":"themes/overdose/_config.yml.example","hash":"9cd8308145cdb11f3ef2edaf1727a4728310f24f","modified":1551162362000},{"_id":"themes/overdose/package.json","hash":"8cf8d4f1c649d0705e318691da5a29aa45846791","modified":1551162362000},{"_id":"themes/overdose/postcss.config.js","hash":"8216a8b025744df059063792ea5fd8a637b000c5","modified":1551162362000},{"_id":"themes/overdose/layout/archive.pug","hash":"226a8fb56b53ae084095f05abe36d6797bda98c1","modified":1551162362000},{"_id":"themes/overdose/layout/category.pug","hash":"34dbd9ee517a73906638387a75404f8fb38cddec","modified":1551162362000},{"_id":"themes/overdose/layout/index.pug","hash":"34dbd9ee517a73906638387a75404f8fb38cddec","modified":1551162362000},{"_id":"themes/overdose/layout/page.pug","hash":"59ba7302cac7c1af1ea54d00a9178b3a87ed2ebf","modified":1551162362000},{"_id":"themes/overdose/layout/tag.pug","hash":"34dbd9ee517a73906638387a75404f8fb38cddec","modified":1551162362000},{"_id":"themes/overdose/layout/post.pug","hash":"3aa85f9f3242498263118527cc50e1b6e2afe017","modified":1551162362000},{"_id":"themes/overdose/scripts/after_post_render.js","hash":"07240751357d1088ffe7c6e746c63402ae46e585","modified":1551162362000},{"_id":"themes/overdose/scripts/banner.js","hash":"44c4a020b689df6da6c068fc8519536ad6b19b27","modified":1551162362000},{"_id":"themes/overdose/scripts/related-posts.js","hash":"331ad9c73696a89af4f83342b802fc3a54a2578b","modified":1551162362000},{"_id":"themes/overdose/scripts/canonical.js","hash":"b4b318abd2c5d6914df0bd35462146bc926dd537","modified":1551162362000},{"_id":"themes/overdose/layout/.DS_Store","hash":"ae37dd218934adbe6720c8655597f47bcf295e5a","modified":1551166042000},{"_id":"themes/overdose/layout/includes/article.pug","hash":"3fbed0e65173abc02abc3c7f72b674242e19efa2","modified":1551162362000},{"_id":"themes/overdose/layout/includes/footer.pug","hash":"3c291b7365923ca12b1c22ef6afd119c717b34a0","modified":1551165287000},{"_id":"themes/overdose/layout/includes/layout.pug","hash":"87f29c04643ca5d4ce85da7783793c665478291b","modified":1551162362000},{"_id":"themes/overdose/layout/includes/head.pug","hash":"5823a1fc3ef8637b73be105e5ddb21dc2dee5d68","modified":1551164967000},{"_id":"themes/overdose/layout/includes/menu.pug","hash":"4bfcae72ea5854b423c4787e9701ea2bc2c51c01","modified":1551162362000},{"_id":"themes/overdose/layout/includes/pagination.pug","hash":"5de9abc8f62b9040c7f7ba9034084e09d6104f2b","modified":1551162362000},{"_id":"themes/overdose/layout/includes/post-list.pug","hash":"98cbc1da01beacf60ce2d5fb4883b0f020462612","modified":1551162362000},{"_id":"themes/overdose/source/.DS_Store","hash":"b8e5951c497e1060bfccf7be197be3bad8cb1885","modified":1551165131000},{"_id":"themes/overdose/layout/includes/sharer.pug","hash":"d2a5ea6619dadf1a0a275985f79efc2cddfff8f1","modified":1551162362000},{"_id":"themes/overdose/layout/includes/widgets.pug","hash":"82c34c8ea15376fd16e2ad1fb167ddbbac1f671f","modified":1551162362000},{"_id":"themes/overdose/source/css/index.css","hash":"2476c5f29fab9ef22e88150f237f75377e56e3d1","modified":1551162362000},{"_id":"themes/overdose/source/css/layout.scss","hash":"241678a0325ed4a78319a5cd3d5d8138b40d01eb","modified":1551162362000},{"_id":"themes/overdose/source/images/avatar.jpg","hash":"d2b9375c83594efbe9e2476280be4477e1879af9","modified":1551162362000},{"_id":"themes/overdose/source/images/avatar.png","hash":"53be9c40b947be6dbeec173192eecbd076369288","modified":1551045428000},{"_id":"themes/overdose/source/images/icon.png","hash":"77059cf612b9871d4ce4daff757900d40371bede","modified":1551162362000},{"_id":"themes/overdose/source/images/logo.png","hash":"3fb2ffb7b2007cd4279966907a00b3eab15e7361","modified":1551162362000},{"_id":"themes/overdose/source/js/classList.min.js","hash":"1f2d8636db596d4117f08427c70e9d1c8d0f8bb5","modified":1551162362000},{"_id":"themes/overdose/source/js/dynamicMenu.js","hash":"b125604f1c3878d3926272a98eecd2662b619ef6","modified":1551162362000},{"_id":"themes/overdose/source/js/dynamicMenu.min.js","hash":"b9ac23466d194b46d0d36e801dad07e9dd723dec","modified":1551162362000},{"_id":"themes/overdose/source/js/index.min.js","hash":"e0b6d05300edcf59d5edeec05990c7a70bde54f1","modified":1551162362000},{"_id":"themes/overdose/source/js/sharer.js","hash":"b1116cb88ef9b56af03e03a9c8536ddd3aededb8","modified":1551162362000},{"_id":"themes/overdose/source/js/sharer.min.js","hash":"d569f2d388f9f45fb9502a7a99dab94afeb4ae9e","modified":1551162362000},{"_id":"themes/overdose/src/css/article.css","hash":"b537459450511807ecce1b693f1c32b9e13bd88a","modified":1551162362000},{"_id":"themes/overdose/src/css/archives.css","hash":"83ddcb879bf1bc0d32c728c247c8200a1b864afb","modified":1551162362000},{"_id":"themes/overdose/src/css/font.css","hash":"28137a7a52baf138d8910c274a09f20b1b341557","modified":1551162362000},{"_id":"themes/overdose/src/css/footer.css","hash":"c3c439b966de77e175063fbd10b5f8f97bb49bf0","modified":1551162362000},{"_id":"themes/overdose/src/css/index.css","hash":"29697990ecb620a8bce119285354a80eac90dc78","modified":1551162362000},{"_id":"themes/overdose/src/css/layout.css","hash":"056776207cf8dd9bb19885a26479e2e8ef7cbb70","modified":1551162362000},{"_id":"themes/overdose/src/css/menu.css","hash":"f3e42bb5a882050fb3ce9770492944449fd8f7bb","modified":1551162362000},{"_id":"themes/overdose/src/css/overdose.css","hash":"f57c37478325f696bc250591614968b616e6b215","modified":1551162362000},{"_id":"themes/overdose/src/css/pagination.css","hash":"a15f5174c28e8d3ec2cc9792c2eee4aebb9cede0","modified":1551162362000},{"_id":"themes/overdose/src/css/post-list.css","hash":"f30bad2e6910c992ed9d2856614cd6290a0b712e","modified":1551162362000},{"_id":"themes/overdose/src/css/profile.css","hash":"e79c3310b90b44ff99240990901427d02a41aa12","modified":1551162362000},{"_id":"themes/overdose/src/css/recent-posts.css","hash":"4d8472725dd05e2e6301ebbb951f26f4bc16f74e","modified":1551162362000},{"_id":"themes/overdose/src/css/sharer.css","hash":"a397a2bf12265904de6e9811ea7945e82efe2e1e","modified":1551162362000},{"_id":"themes/overdose/src/css/variables.css","hash":"06768967e6e6bd8bccf5030e6c827f1e87b6e7c1","modified":1551162362000},{"_id":"themes/overdose/src/css/widgets.css","hash":"265728d6613fbe21ecc9d2d0a2d9b98b264637a5","modified":1551162362000},{"_id":"themes/overdose/layout/includes/widgets/archives.pug","hash":"407cb46af303ecaade2c40e2ab48331665ea0a45","modified":1551162362000},{"_id":"themes/overdose/layout/includes/widgets/categories.pug","hash":"72f021ebb184a62572ae4cb3c14b33aad546e01c","modified":1551162362000},{"_id":"themes/overdose/layout/includes/widgets/recent-posts.pug","hash":"664b3571b20fe5c23b25faf30b97ed6fcef8cec8","modified":1551162362000},{"_id":"themes/overdose/layout/includes/widgets/tag-cloud.pug","hash":"bec9a60a288e981125463b4fdb61c4910979b236","modified":1551162362000},{"_id":"themes/overdose/layout/includes/widgets/tags.pug","hash":"73380434377b236e9dece61d8a3b7ae7f9c1a3b2","modified":1551162362000},{"_id":"themes/overdose/source/css/highlights/agate.css","hash":"5e548ef20e8a6658a2c916b286242d8b36b48e5b","modified":1551162362000},{"_id":"themes/overdose/source/css/highlights/androidstudio.css","hash":"ff55f1f0c746fd6a03cd1a91e2a9be9e240f33f4","modified":1551162362000},{"_id":"themes/overdose/source/css/highlights/arduino-light.css","hash":"37a246775ff2f43ec4309d7b915b60ec45d13456","modified":1551162362000},{"_id":"themes/overdose/source/css/highlights/arta.css","hash":"97d4ced4c990256a92fb2d1941811cac298c4769","modified":1551162362000},{"_id":"themes/overdose/source/css/highlights/ascetic.css","hash":"76a1ce365f8c736a35e9a03fb4b9fec5c5b3ff43","modified":1551162362000},{"_id":"themes/overdose/source/css/highlights/atelier-cave-dark.css","hash":"e5e774ac0f936eff10b63179cdb6e75f014daabe","modified":1551162362000},{"_id":"themes/overdose/source/css/highlights/atelier-cave-light.css","hash":"4f650706b0caf9f3a1632984f4c940220d0d8bc7","modified":1551162362000},{"_id":"themes/overdose/source/css/highlights/atelier-dune-dark.css","hash":"e6c0d4fac56b992ce5675702b6f39ac5e37b1df1","modified":1551162362000},{"_id":"themes/overdose/source/css/highlights/atelier-dune-light.css","hash":"93b86b2dffa707866ba04275ba69fc9c99c7ed92","modified":1551162362000},{"_id":"themes/overdose/source/css/highlights/atelier-estuary-dark.css","hash":"92258ee48a2e1180c5c3d578f2afaefdab1496ce","modified":1551162362000},{"_id":"themes/overdose/source/css/highlights/atelier-estuary-light.css","hash":"8e5845248d56115aed2b2514c2e4cd3d73766f08","modified":1551162362000},{"_id":"themes/overdose/source/css/highlights/atelier-forest-dark.css","hash":"9d059b9e051360d513c0a567f838ae0b1a467daa","modified":1551162362000},{"_id":"themes/overdose/source/css/highlights/atelier-forest-light.css","hash":"ff9ce22b62e17c211ba5d58dae8ece05ccd4877c","modified":1551162362000},{"_id":"themes/overdose/source/css/highlights/atelier-heath-dark.css","hash":"7b10f9c5c37ba50a43e674153149cd3c22fd614c","modified":1551162362000},{"_id":"themes/overdose/source/css/highlights/atelier-heath-light.css","hash":"32e01760f05a79aec2d4c2f8d68c8318bfd8707b","modified":1551162362000},{"_id":"themes/overdose/source/css/highlights/atelier-lakeside-dark.css","hash":"110e3b1e67942cd15ae76b95d9db56831fec75c4","modified":1551162362000},{"_id":"themes/overdose/source/css/highlights/atelier-lakeside-light.css","hash":"ab314c8a7bae007d3e4099097b4822c05016d0b5","modified":1551162362000},{"_id":"themes/overdose/source/css/highlights/atelier-plateau-dark.css","hash":"e623056f53af0ee03d899b9f964d53f65bfab2f6","modified":1551162362000},{"_id":"themes/overdose/source/css/highlights/atelier-plateau-light.css","hash":"6d89fda9e6e2552be411ad7cf543e7fcfe81acf6","modified":1551162362000},{"_id":"themes/overdose/source/css/highlights/atelier-savanna-dark.css","hash":"4913c1e2fe1b88536fe4a291a1eb5d3b7ee444cf","modified":1551162362000},{"_id":"themes/overdose/source/css/highlights/atelier-savanna-light.css","hash":"c87220b1b9cd7a4adcadc76826e7264930e34323","modified":1551162362000},{"_id":"themes/overdose/source/css/highlights/atelier-seaside-light.css","hash":"d000dbc0ad14b9da81a1356a5a5fcf32e36b9b10","modified":1551162362000},{"_id":"themes/overdose/source/css/highlights/atelier-sulphurpool-dark.css","hash":"46a01ea8cdaa51cd86f9ae13320e18b0361a2bdd","modified":1551162362000},{"_id":"themes/overdose/source/css/highlights/atelier-seaside-dark.css","hash":"ab02ecde71141e9b691561c47da7177bf9f0ffc5","modified":1551162362000},{"_id":"themes/overdose/source/css/highlights/atelier-sulphurpool-light.css","hash":"ca61193532d721b72dff5258abbc6248142a6408","modified":1551162362000},{"_id":"themes/overdose/source/css/highlights/atom-one-light.css","hash":"59084376be155d3a70c502ed4ca65c5cad33c2e5","modified":1551162362000},{"_id":"themes/overdose/source/css/highlights/atom-one-dark.css","hash":"5f79c800dd6e8ff107d87c662e4b4639b5238219","modified":1551162362000},{"_id":"themes/overdose/source/css/highlights/brown-papersq.png","hash":"3a1332ede3a75a3d24f60b6ed69035b72da5e182","modified":1551162362000},{"_id":"themes/overdose/source/css/highlights/brown-paper.css","hash":"f5d04e82893e7b18d0eb565970c5f9d8fb5ca923","modified":1551162362000},{"_id":"themes/overdose/source/css/highlights/codepen-embed.css","hash":"2f43c960222180e27e85c0472cc19eb4942ce72c","modified":1551162362000},{"_id":"themes/overdose/source/css/highlights/color-brewer.css","hash":"f6b37f80ce56edae7f501043859470331da012c4","modified":1551162362000},{"_id":"themes/overdose/source/css/highlights/dark.css","hash":"eff983b17564572d3638742f933318bbef73da23","modified":1551162362000},{"_id":"themes/overdose/source/css/highlights/darkula.css","hash":"cf7b5912fb1993c4f26f9a62f0099ee1dbb4c18b","modified":1551162362000},{"_id":"themes/overdose/source/css/highlights/docco.css","hash":"14717adc22a374db464fd0dc0df6b13774df0c52","modified":1551162362000},{"_id":"themes/overdose/source/css/highlights/dracula.css","hash":"38a97c1925ce909af702021fe0ee0a479290348e","modified":1551162362000},{"_id":"themes/overdose/source/css/highlights/far.css","hash":"c996361cad354905eec71c90a9c864e205a9458f","modified":1551162362000},{"_id":"themes/overdose/source/css/highlights/foundation.css","hash":"0092c37949a52be704f36608d892133cccd7ddb8","modified":1551162362000},{"_id":"themes/overdose/source/css/highlights/github-gist.css","hash":"5e8f24c0e196d544531b208ae7c04b2d34645601","modified":1551162362000},{"_id":"themes/overdose/source/css/highlights/github.css","hash":"108d8e13f8171de7633d28844ad9591293236431","modified":1551162362000},{"_id":"themes/overdose/source/css/highlights/googlecode.css","hash":"d03d03dd80ed689bb7ef41603b3fa60c04d72783","modified":1551162362000},{"_id":"themes/overdose/source/css/highlights/grayscale.css","hash":"59db0b1ec56334aa8ab7db63aef0691de530d827","modified":1551162362000},{"_id":"themes/overdose/source/css/highlights/highlightjs.css","hash":"09d164e19b612119cd83100d4935f6420fb3f073","modified":1551162362000},{"_id":"themes/overdose/source/css/highlights/hopscotch.css","hash":"cdcdb932bbdd807c51cc7b3cf5c231871f206d6e","modified":1551162362000},{"_id":"themes/overdose/source/css/highlights/hybrid.css","hash":"6e4d44d6c3111c7879f6e7c07ba63f3a055ce1b3","modified":1551162362000},{"_id":"themes/overdose/source/css/highlights/idea.css","hash":"82ffc1ed74c06519e951c27e2f7d0d933adec5fe","modified":1551162362000},{"_id":"themes/overdose/source/css/highlights/ir-black.css","hash":"bd3d0ab8552853e91ffe150be16a99aeb88277a5","modified":1551162362000},{"_id":"themes/overdose/source/css/highlights/kimbie-dark.css","hash":"91d8ded52f6c5403142f7ae5d66438e0ab8b8eb6","modified":1551162362000},{"_id":"themes/overdose/source/css/highlights/kimbie-light.css","hash":"93af55cf912d90afd38a18e000275dbc541a2ad0","modified":1551162362000},{"_id":"themes/overdose/source/css/highlights/magula.css","hash":"3b2cce885ecf2290cce77747bd83aa97f943dc9a","modified":1551162362000},{"_id":"themes/overdose/source/css/highlights/mono-blue.css","hash":"e80091702c6f63cc1f83cfb5298eda6c1fff72df","modified":1551162362000},{"_id":"themes/overdose/source/css/highlights/monokai-sublime.css","hash":"82f2d41f6e5816036d4cbf6c58788003041dde12","modified":1551162362000},{"_id":"themes/overdose/source/css/highlights/monokai.css","hash":"89725e8da595c329b19f25b7c76fd269ba1b0798","modified":1551162362000},{"_id":"themes/overdose/source/css/highlights/obsidian.css","hash":"64ec37c049eef23d70f09f49cbebb60e5eb1480b","modified":1551162362000},{"_id":"themes/overdose/source/css/highlights/paraiso-dark.css","hash":"32e9207496270d2b22b33ed2c28e0f0e44ba4c9e","modified":1551162362000},{"_id":"themes/overdose/source/css/highlights/paraiso-light.css","hash":"f16d81ab9066eb52c6827b7eb5c2232c6cfd39d5","modified":1551162362000},{"_id":"themes/overdose/source/css/highlights/pojoaque.css","hash":"afc5a7a0c968a0cb0e2279d24412ee6874bcdc67","modified":1551162362000},{"_id":"themes/overdose/source/css/highlights/pojoaque.jpg","hash":"c5fe6533b88b21f8d90d3d03954c6b29baa67791","modified":1551162362000},{"_id":"themes/overdose/source/css/highlights/railscasts.css","hash":"3db2f9bbc61398f2a2dce0c6cfb4ba31e00e20fc","modified":1551162362000},{"_id":"themes/overdose/source/css/highlights/rainbow.css","hash":"b63461e39890d9e402ec45c9c189bffb49d863a0","modified":1551162362000},{"_id":"themes/overdose/source/css/highlights/school-book.css","hash":"a782488eb2a092b54212e8b98e87a105ab9870f0","modified":1551162362000},{"_id":"themes/overdose/source/css/highlights/school-book.png","hash":"711ec983c874e093bb89eb77afcbdf6741fa61ee","modified":1551162362000},{"_id":"themes/overdose/source/css/highlights/solarized-dark.css","hash":"bc5162b4257142fa350e3d8c79be5c077bbb4c17","modified":1551162362000},{"_id":"themes/overdose/source/css/highlights/solarized-light.css","hash":"9be12dd6b088976db66e7c0a8cf8976160b69bf9","modified":1551162362000},{"_id":"themes/overdose/source/css/highlights/sunburst.css","hash":"8a452fb2b8986c2dbbdb01feadb3a69c4f612646","modified":1551162362000},{"_id":"themes/overdose/source/css/highlights/tomorrow-night-blue.css","hash":"e16c62a43daa01a3a5eb53194b18b971f80a982f","modified":1551162362000},{"_id":"themes/overdose/source/css/highlights/tomorrow-night-bright.css","hash":"931795398eec8ba8c1619f5de3bced638eb10533","modified":1551162362000},{"_id":"themes/overdose/source/css/highlights/tomorrow-night-eighties.css","hash":"64d3ed62c1764789d63357dea417b2a5b3160ff8","modified":1551162362000},{"_id":"themes/overdose/source/css/highlights/tomorrow-night.css","hash":"ddd91d22a390381374c88b3f929fe0489ae4e2b4","modified":1551162362000},{"_id":"themes/overdose/source/css/highlights/tomorrow.css","hash":"0b35aca18ac1dcf043231aa94da7a648604886b8","modified":1551162362000},{"_id":"themes/overdose/source/css/highlights/vs.css","hash":"603b5415ea3d7b1e4c5fcf6564c14f133817377f","modified":1551162362000},{"_id":"themes/overdose/source/css/highlights/xcode.css","hash":"740c4fa9ef607c0b3a7914753d8d7cc509e638c0","modified":1551162362000},{"_id":"themes/overdose/source/css/highlights/zenburn.css","hash":"f38220c13e6a664489c88a951244176c22233f55","modified":1551162362000},{"_id":"themes/overdose/source/libs/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1551162362000},{"_id":"themes/overdose/source/libs/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1551162362000},{"_id":"themes/overdose/source/libs/font-awesome/README.md","hash":"3880a58a50ef7514317c4f47b5707d4fd0106c9c","modified":1551162362000},{"_id":"themes/overdose/source/libs/font-awesome/package.json","hash":"1f2b1a268fb702727f33f348e043ffd7d0b86ec5","modified":1551162362000},{"_id":"themes/overdose/source/libs/spoqa-han-sans-jp/.gitignore","hash":"d5a4972da82411622d6b96ffe1dd70cac047e03e","modified":1551162362000},{"_id":"themes/overdose/source/libs/spoqa-han-sans-jp/LICENSE","hash":"14734e5bc431c347ddbaaf73c4426fbfd9db8812","modified":1551162362000},{"_id":"themes/overdose/source/libs/spoqa-han-sans-jp/README.md","hash":"4236ce303a2a64a79cf8dfacf8805edb23c917fb","modified":1551162362000},{"_id":"themes/overdose/source/libs/spoqa-han-sans-kr/LICENSE","hash":"14734e5bc431c347ddbaaf73c4426fbfd9db8812","modified":1551162362000},{"_id":"themes/overdose/source/libs/spoqa-han-sans-kr/README.md","hash":"4236ce303a2a64a79cf8dfacf8805edb23c917fb","modified":1551162362000},{"_id":"themes/overdose/source/libs/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1551162362000},{"_id":"themes/overdose/source/libs/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1551162362000},{"_id":"themes/overdose/source/libs/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1551162362000},{"_id":"themes/overdose/source/libs/font-awesome/less/animated.less","hash":"421f2c4e10191f148c13b8a34e5ff3f484d4c393","modified":1551162362000},{"_id":"themes/overdose/source/libs/font-awesome/less/fixed-width.less","hash":"ec0c24b97184dab86177660f486b8d08cd636c42","modified":1551162362000},{"_id":"themes/overdose/source/libs/font-awesome/less/core.less","hash":"1a37352286619b789d151a06eb4b7551e4c1aaa2","modified":1551162362000},{"_id":"themes/overdose/source/libs/font-awesome/less/bordered-pulled.less","hash":"a2c292137b17406183ad0fdbf4880fd648b9a5ca","modified":1551162362000},{"_id":"themes/overdose/source/libs/font-awesome/less/font-awesome.less","hash":"9ffe7422dc235450a21f019f410ed359ed151f4b","modified":1551162362000},{"_id":"themes/overdose/source/libs/font-awesome/less/list.less","hash":"f53bc20884a1410d950b4a36a330c5181a8b55ab","modified":1551162362000},{"_id":"themes/overdose/source/libs/font-awesome/less/larger.less","hash":"e7119e82dc50540dbc3472bba7d74282815a7ecc","modified":1551162362000},{"_id":"themes/overdose/source/libs/font-awesome/less/path.less","hash":"1afb4a849059631f76ed2a519d7fb1bd0af14802","modified":1551162362000},{"_id":"themes/overdose/source/libs/font-awesome/less/mixins.less","hash":"3c5b36b0069372b525ed8bbbcf6b3d4d2bed4e78","modified":1551162362000},{"_id":"themes/overdose/source/libs/font-awesome/less/icons.less","hash":"0285a999eb1adad868366678c2d9365b77186a45","modified":1551162362000},{"_id":"themes/overdose/source/libs/font-awesome/less/rotated-flipped.less","hash":"95de5de9009714692430b04f9cd4388be8fba8f3","modified":1551162362000},{"_id":"themes/overdose/source/libs/font-awesome/less/screen-reader.less","hash":"71139132f170ebe7712836210f4d2c4905151899","modified":1551162362000},{"_id":"themes/overdose/source/libs/font-awesome/less/stacked.less","hash":"f044077bc8be1a989c245254e81eb084d52d29a7","modified":1551162362000},{"_id":"themes/overdose/source/libs/font-awesome/less/variables.less","hash":"8a5c800747705df16117cc598c1b9f512e873bfe","modified":1551162362000},{"_id":"themes/overdose/source/libs/font-awesome/scss/_animated.scss","hash":"8daf189b2f8a404495b8424b6fd1ba630dd1c2dc","modified":1551162362000},{"_id":"themes/overdose/source/libs/font-awesome/scss/_bordered-pulled.scss","hash":"164b6a0a2b307cd293f4a914ab0fcdf643950374","modified":1551162362000},{"_id":"themes/overdose/source/libs/font-awesome/scss/_core.scss","hash":"55a14a34267edc401b82e5ee41d8bd84fbb5da3f","modified":1551162362000},{"_id":"themes/overdose/source/libs/font-awesome/scss/_fixed-width.scss","hash":"224417ca266c657849afb2bbcb6dc455894ff387","modified":1551162362000},{"_id":"themes/overdose/source/libs/font-awesome/scss/_icons.scss","hash":"830e0183337d16c07b1c63838f7593a33ee87b15","modified":1551162362000},{"_id":"themes/overdose/source/libs/font-awesome/scss/_larger.scss","hash":"940e1c5ebc690283bfaee92560cf15fabedbf6a9","modified":1551162362000},{"_id":"themes/overdose/source/libs/font-awesome/scss/_list.scss","hash":"4b53ee01513df8b9ce76442b2d8f1851613a435c","modified":1551162362000},{"_id":"themes/overdose/source/libs/font-awesome/scss/_mixins.scss","hash":"4f3881034a4c11cae8cc915f288477b498a357a2","modified":1551162362000},{"_id":"themes/overdose/source/libs/font-awesome/scss/_path.scss","hash":"080158aeb1bf6df59ec98b2bbed44da61d9c9ca3","modified":1551162362000},{"_id":"themes/overdose/source/libs/font-awesome/scss/_rotated-flipped.scss","hash":"ca08a0af3da63c2f2a7d3c27a8747637744cc785","modified":1551162362000},{"_id":"themes/overdose/source/libs/font-awesome/scss/_screen-reader.scss","hash":"2d8563c488f68e75a28d540dd89301ee4ee08c97","modified":1551162362000},{"_id":"themes/overdose/source/libs/font-awesome/scss/_stacked.scss","hash":"cf6752ee609af36eb293a7197c88d31ecacbbc74","modified":1551162362000},{"_id":"themes/overdose/source/libs/font-awesome/scss/_variables.scss","hash":"0d6d70535104b42e60d7f44ae6ccf9de023a7b8b","modified":1551162362000},{"_id":"themes/overdose/source/libs/font-awesome/scss/font-awesome.scss","hash":"dd83648ea5bc832f87c3c1bf956c54dec065a9bd","modified":1551162362000},{"_id":"themes/overdose/source/libs/spoqa-han-sans-jp/css/SpoqaHanSans-jp.css","hash":"48b4649e4dfe408559f3d4a0cbdb4f459d73d7c4","modified":1551162362000},{"_id":"themes/overdose/source/libs/spoqa-han-sans-kr/css/SpoqaHanSans-kr.css","hash":"a91f8aac14fabc4fac3f5c199b387629ed3cb254","modified":1551162362000},{"_id":"themes/overdose/source/libs/spoqa-han-sans-jp/fonts/SpoqaHanSans_JP/LICENSE","hash":"f92432ad07114a0d0495d1713228bdc97a00a82f","modified":1551162362000},{"_id":"themes/overdose/source/libs/spoqa-han-sans-jp/fonts/SpoqaHanSans_JP/LICENSE_OFL.txt","hash":"ec660b17dff69058c2bbf122ca85ab83b920fce7","modified":1551162362000},{"_id":"themes/overdose/source/libs/spoqa-han-sans-jp/fonts/SpoqaHanSans_JP/glyphs.txt","hash":"13838f65c143b3ee4488bf1cefd3547d872cfd2d","modified":1551162362000},{"_id":"themes/overdose/source/libs/spoqa-han-sans-kr/fonts/SpoqaHanSans/LICENSE","hash":"f92432ad07114a0d0495d1713228bdc97a00a82f","modified":1551162362000},{"_id":"themes/overdose/source/libs/spoqa-han-sans-kr/fonts/SpoqaHanSans/LICENSE_OFL.txt","hash":"ec660b17dff69058c2bbf122ca85ab83b920fce7","modified":1551162362000},{"_id":"themes/overdose/source/libs/spoqa-han-sans-kr/fonts/SpoqaHanSans/glyphs.txt","hash":"cf80b0c9768b0b39e08424549288e17dde05d56d","modified":1551162362000},{"_id":"themes/overdose/yarn.lock","hash":"66220601ec973243a0284f9db18e12307b523f5b","modified":1551162362000},{"_id":"themes/overdose/.DS_Store","hash":"60cfccc499e63088aa7ddd4b3fe2ae0267c62496","modified":1551167138000},{"_id":"themes/overdose/source/images/default.jpg","hash":"61a2235502e54ca5c9aa646ba6f440f1e1cab1b8","modified":1551162362000},{"_id":"themes/overdose/source/libs/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1551162362000},{"_id":"themes/overdose/source/libs/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1551162362000},{"_id":"themes/overdose/source/libs/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1551162362000},{"_id":"themes/overdose/source/libs/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1551162362000},{"_id":"themes/overdose/source/libs/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1551162362000},{"_id":"themes/overdose/source/images/mock-up.png","hash":"29e6fce893ba16d7410bd11a8b0c347b5a34cbde","modified":1551162362000},{"_id":"themes/overdose/source/libs/spoqa-han-sans-kr/fonts/SpoqaHanSans/SpoqaHanSansRegular.woff2","hash":"aa876da43e2b0ba89611289121cc635dcfab24c9","modified":1551162362000},{"_id":"themes/overdose/source/libs/spoqa-han-sans-kr/fonts/SpoqaHanSans/SpoqaHanSansThin.woff2","hash":"808e1fa554205a785da397145686eb441186bd24","modified":1551162362000},{"_id":"themes/overdose/source/libs/spoqa-han-sans-kr/fonts/SpoqaHanSans/SpoqaHanSansBold.woff2","hash":"20f2ce416df92cf5c39fdbca6078c07e58785121","modified":1551162362000},{"_id":"themes/overdose/source/libs/spoqa-han-sans-kr/fonts/SpoqaHanSans/SpoqaHanSansLight.woff2","hash":"b359e2684107517354d5756e53a50e56f770c6ef","modified":1551162362000},{"_id":"themes/overdose/source/libs/spoqa-han-sans-kr/fonts/SpoqaHanSans/SpoqaHanSansLight.woff","hash":"e12519b040352e5a67365933e677a1824a63f0c1","modified":1551162362000},{"_id":"themes/overdose/source/libs/spoqa-han-sans-kr/fonts/SpoqaHanSans/SpoqaHanSansThin.woff","hash":"8a709c40ccf5b501c174ce1c2bc48969044bf7de","modified":1551162362000},{"_id":"themes/overdose/source/libs/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1551162362000},{"_id":"themes/overdose/source/libs/spoqa-han-sans-kr/fonts/SpoqaHanSans/SpoqaHanSansBold.woff","hash":"35a05852ffc1317a5fda820019eeaa04ed0ef492","modified":1551162362000},{"_id":"themes/overdose/source/libs/spoqa-han-sans-kr/fonts/SpoqaHanSans/SpoqaHanSansRegular.woff","hash":"876cf99a46ae55a3013df44632d9e3e02b4077c9","modified":1551162362000},{"_id":"public/2019/06/10/Zapier-Screenshots-How-To-Take-Screenshots-With-Zapier/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1603472215851},{"_id":"public/why-you-shouldnt-build-your-own-puppeteer-screenshot-api-solution","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1603472215851},{"_id":"public/how-to-build-a-competitor-tracker-using-getscreenshot-and-cron-job-org","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1603472215851},{"_id":"public/archives/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1603472215851},{"_id":"public/archives/2019/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1603472215851},{"_id":"public/archives/2019/02/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1603472215851},{"_id":"public/archives/2019/06/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1603472215851},{"_id":"public/categories/zapier/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1603472215851},{"_id":"public/categories/tutorial/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1603472215851},{"_id":"public/categories/puppeteer/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1603472215851},{"_id":"public/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1603472215851},{"_id":"public/libs/spoqa-han-sans-jp/fonts/SpoqaHanSans_JP/SpoqaHanSansJPBold.woff","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1603472215851},{"_id":"public/libs/spoqa-han-sans-jp/fonts/SpoqaHanSans_JP/SpoqaHanSansJPBold.woff2","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1603472215851},{"_id":"public/libs/spoqa-han-sans-jp/fonts/SpoqaHanSans_JP/SpoqaHanSansJPLight.woff","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1603472215851},{"_id":"public/libs/spoqa-han-sans-jp/fonts/SpoqaHanSans_JP/SpoqaHanSansJPLight.woff2","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1603472215851},{"_id":"public/libs/spoqa-han-sans-jp/fonts/SpoqaHanSans_JP/SpoqaHanSansJPRegular.woff","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1603472215851},{"_id":"public/libs/spoqa-han-sans-jp/fonts/SpoqaHanSans_JP/SpoqaHanSansJPRegular.woff2","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1603472215851},{"_id":"public/libs/spoqa-han-sans-jp/fonts/SpoqaHanSans_JP/SpoqaHanSansJPThin.woff","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1603472215851},{"_id":"public/libs/spoqa-han-sans-jp/fonts/SpoqaHanSans_JP/SpoqaHanSansJPThin.woff2","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1603472215851},{"_id":"public/images/avatar.jpg","hash":"d2b9375c83594efbe9e2476280be4477e1879af9","modified":1603472215851},{"_id":"public/images/avatar.png","hash":"53be9c40b947be6dbeec173192eecbd076369288","modified":1603472215851},{"_id":"public/css/layout.scss","hash":"241678a0325ed4a78319a5cd3d5d8138b40d01eb","modified":1603472215851},{"_id":"public/images/logo.png","hash":"3fb2ffb7b2007cd4279966907a00b3eab15e7361","modified":1603472215851},{"_id":"public/images/icon.png","hash":"77059cf612b9871d4ce4daff757900d40371bede","modified":1603472215851},{"_id":"public/css/highlights/brown-papersq.png","hash":"3a1332ede3a75a3d24f60b6ed69035b72da5e182","modified":1603472215851},{"_id":"public/css/highlights/pojoaque.jpg","hash":"c5fe6533b88b21f8d90d3d03954c6b29baa67791","modified":1603472215851},{"_id":"public/css/highlights/school-book.png","hash":"711ec983c874e093bb89eb77afcbdf6741fa61ee","modified":1603472215851},{"_id":"public/libs/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1603472215851},{"_id":"public/libs/spoqa-han-sans-jp/LICENSE","hash":"14734e5bc431c347ddbaaf73c4426fbfd9db8812","modified":1603472215851},{"_id":"public/libs/spoqa-han-sans-kr/LICENSE","hash":"14734e5bc431c347ddbaaf73c4426fbfd9db8812","modified":1603472215851},{"_id":"public/libs/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1603472215851},{"_id":"public/libs/font-awesome/less/animated.less","hash":"421f2c4e10191f148c13b8a34e5ff3f484d4c393","modified":1603472215851},{"_id":"public/libs/font-awesome/less/fixed-width.less","hash":"ec0c24b97184dab86177660f486b8d08cd636c42","modified":1603472215851},{"_id":"public/libs/font-awesome/less/core.less","hash":"1a37352286619b789d151a06eb4b7551e4c1aaa2","modified":1603472215851},{"_id":"public/libs/font-awesome/less/bordered-pulled.less","hash":"a2c292137b17406183ad0fdbf4880fd648b9a5ca","modified":1603472215851},{"_id":"public/libs/font-awesome/less/font-awesome.less","hash":"9ffe7422dc235450a21f019f410ed359ed151f4b","modified":1603472215851},{"_id":"public/libs/font-awesome/less/list.less","hash":"f53bc20884a1410d950b4a36a330c5181a8b55ab","modified":1603472215851},{"_id":"public/libs/font-awesome/less/larger.less","hash":"e7119e82dc50540dbc3472bba7d74282815a7ecc","modified":1603472215851},{"_id":"public/libs/font-awesome/less/mixins.less","hash":"3c5b36b0069372b525ed8bbbcf6b3d4d2bed4e78","modified":1603472215851},{"_id":"public/libs/font-awesome/less/path.less","hash":"1afb4a849059631f76ed2a519d7fb1bd0af14802","modified":1603472215851},{"_id":"public/libs/font-awesome/less/screen-reader.less","hash":"71139132f170ebe7712836210f4d2c4905151899","modified":1603472215851},{"_id":"public/libs/font-awesome/less/rotated-flipped.less","hash":"95de5de9009714692430b04f9cd4388be8fba8f3","modified":1603472215851},{"_id":"public/libs/font-awesome/less/stacked.less","hash":"f044077bc8be1a989c245254e81eb084d52d29a7","modified":1603472215851},{"_id":"public/libs/font-awesome/scss/font-awesome.scss","hash":"dd83648ea5bc832f87c3c1bf956c54dec065a9bd","modified":1603472215851},{"_id":"public/libs/spoqa-han-sans-jp/fonts/SpoqaHanSans_JP/LICENSE","hash":"f92432ad07114a0d0495d1713228bdc97a00a82f","modified":1603472215851},{"_id":"public/libs/font-awesome/less/variables.less","hash":"8a5c800747705df16117cc598c1b9f512e873bfe","modified":1603472215851},{"_id":"public/libs/spoqa-han-sans-jp/fonts/SpoqaHanSans_JP/LICENSE_OFL.txt","hash":"ec660b17dff69058c2bbf122ca85ab83b920fce7","modified":1603472215851},{"_id":"public/libs/font-awesome/less/icons.less","hash":"0285a999eb1adad868366678c2d9365b77186a45","modified":1603472215851},{"_id":"public/libs/spoqa-han-sans-jp/fonts/SpoqaHanSans_JP/glyphs.txt","hash":"13838f65c143b3ee4488bf1cefd3547d872cfd2d","modified":1603472215851},{"_id":"public/libs/spoqa-han-sans-kr/fonts/SpoqaHanSans/LICENSE","hash":"f92432ad07114a0d0495d1713228bdc97a00a82f","modified":1603472215851},{"_id":"public/libs/spoqa-han-sans-kr/fonts/SpoqaHanSans/LICENSE_OFL.txt","hash":"ec660b17dff69058c2bbf122ca85ab83b920fce7","modified":1603472215851},{"_id":"public/libs/spoqa-han-sans-kr/fonts/SpoqaHanSans/glyphs.txt","hash":"cf80b0c9768b0b39e08424549288e17dde05d56d","modified":1603472215851},{"_id":"public/why-you-shouldnt-build-your-own-puppeteer-screenshot-api-solution/download.png","hash":"0db278376fed7418eb474e3e78cb31dfb9c696dd","modified":1603472215851},{"_id":"public/how-to-build-a-competitor-tracker-using-getscreenshot-and-cron-job-org/download-3.png","hash":"4d1cfbb4f6e43bafb0a56948c89b0cf3b9b9beb1","modified":1603472215851},{"_id":"public/images/default.jpg","hash":"61a2235502e54ca5c9aa646ba6f440f1e1cab1b8","modified":1603472215851},{"_id":"public/libs/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1603472215851},{"_id":"public/libs/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1603472215851},{"_id":"public/libs/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1603472215851},{"_id":"public/libs/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1603472215851},{"_id":"public/libs/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1603472215851},{"_id":"public/how-to-build-a-competitor-tracker-using-getscreenshot-and-cron-job-org/download-1.png","hash":"534f8629f25a22f8555e879308ab67ca37482119","modified":1603472215851},{"_id":"public/how-to-build-a-competitor-tracker-using-getscreenshot-and-cron-job-org/download.png","hash":"e0b9105d57f82974b493d44d4a83bc86ff6ac186","modified":1603472215851},{"_id":"public/how-to-build-a-competitor-tracker-using-getscreenshot-and-cron-job-org/download1.png","hash":"084070975ada0a012c750123bb95f7c6cfdb7151","modified":1603472215851},{"_id":"public/js/classList.min.js","hash":"1f2d8636db596d4117f08427c70e9d1c8d0f8bb5","modified":1603472215851},{"_id":"public/js/dynamicMenu.js","hash":"b125604f1c3878d3926272a98eecd2662b619ef6","modified":1603472215851},{"_id":"public/js/dynamicMenu.min.js","hash":"b9ac23466d194b46d0d36e801dad07e9dd723dec","modified":1603472215851},{"_id":"public/js/sharer.js","hash":"b1116cb88ef9b56af03e03a9c8536ddd3aededb8","modified":1603472215851},{"_id":"public/js/index.min.js","hash":"e0b6d05300edcf59d5edeec05990c7a70bde54f1","modified":1603472215851},{"_id":"public/js/sharer.min.js","hash":"d569f2d388f9f45fb9502a7a99dab94afeb4ae9e","modified":1603472215851},{"_id":"public/css/highlights/agate.css","hash":"5e548ef20e8a6658a2c916b286242d8b36b48e5b","modified":1603472215851},{"_id":"public/css/highlights/androidstudio.css","hash":"ff55f1f0c746fd6a03cd1a91e2a9be9e240f33f4","modified":1603472215851},{"_id":"public/css/highlights/arduino-light.css","hash":"37a246775ff2f43ec4309d7b915b60ec45d13456","modified":1603472215851},{"_id":"public/css/highlights/arta.css","hash":"97d4ced4c990256a92fb2d1941811cac298c4769","modified":1603472215851},{"_id":"public/css/highlights/ascetic.css","hash":"76a1ce365f8c736a35e9a03fb4b9fec5c5b3ff43","modified":1603472215851},{"_id":"public/css/highlights/atelier-cave-dark.css","hash":"e5e774ac0f936eff10b63179cdb6e75f014daabe","modified":1603472215851},{"_id":"public/css/highlights/atelier-cave-light.css","hash":"4f650706b0caf9f3a1632984f4c940220d0d8bc7","modified":1603472215851},{"_id":"public/css/highlights/atelier-dune-dark.css","hash":"e6c0d4fac56b992ce5675702b6f39ac5e37b1df1","modified":1603472215851},{"_id":"public/css/highlights/atelier-dune-light.css","hash":"93b86b2dffa707866ba04275ba69fc9c99c7ed92","modified":1603472215851},{"_id":"public/css/highlights/atelier-estuary-dark.css","hash":"92258ee48a2e1180c5c3d578f2afaefdab1496ce","modified":1603472215851},{"_id":"public/css/highlights/atelier-estuary-light.css","hash":"8e5845248d56115aed2b2514c2e4cd3d73766f08","modified":1603472215851},{"_id":"public/css/highlights/atelier-forest-dark.css","hash":"9d059b9e051360d513c0a567f838ae0b1a467daa","modified":1603472215851},{"_id":"public/css/highlights/atelier-forest-light.css","hash":"ff9ce22b62e17c211ba5d58dae8ece05ccd4877c","modified":1603472215851},{"_id":"public/css/highlights/atelier-heath-dark.css","hash":"7b10f9c5c37ba50a43e674153149cd3c22fd614c","modified":1603472215851},{"_id":"public/css/highlights/atelier-lakeside-dark.css","hash":"110e3b1e67942cd15ae76b95d9db56831fec75c4","modified":1603472215851},{"_id":"public/css/highlights/atelier-heath-light.css","hash":"32e01760f05a79aec2d4c2f8d68c8318bfd8707b","modified":1603472215851},{"_id":"public/css/highlights/atelier-plateau-dark.css","hash":"e623056f53af0ee03d899b9f964d53f65bfab2f6","modified":1603472215851},{"_id":"public/css/highlights/atelier-lakeside-light.css","hash":"ab314c8a7bae007d3e4099097b4822c05016d0b5","modified":1603472215851},{"_id":"public/css/highlights/atelier-plateau-light.css","hash":"6d89fda9e6e2552be411ad7cf543e7fcfe81acf6","modified":1603472215851},{"_id":"public/css/highlights/atelier-savanna-dark.css","hash":"4913c1e2fe1b88536fe4a291a1eb5d3b7ee444cf","modified":1603472215851},{"_id":"public/css/highlights/atelier-savanna-light.css","hash":"c87220b1b9cd7a4adcadc76826e7264930e34323","modified":1603472215851},{"_id":"public/css/highlights/atelier-seaside-light.css","hash":"d000dbc0ad14b9da81a1356a5a5fcf32e36b9b10","modified":1603472215851},{"_id":"public/css/highlights/atelier-sulphurpool-dark.css","hash":"46a01ea8cdaa51cd86f9ae13320e18b0361a2bdd","modified":1603472215851},{"_id":"public/css/highlights/atelier-seaside-dark.css","hash":"ab02ecde71141e9b691561c47da7177bf9f0ffc5","modified":1603472215851},{"_id":"public/css/highlights/atelier-sulphurpool-light.css","hash":"ca61193532d721b72dff5258abbc6248142a6408","modified":1603472215851},{"_id":"public/css/highlights/atom-one-dark.css","hash":"5f79c800dd6e8ff107d87c662e4b4639b5238219","modified":1603472215851},{"_id":"public/css/highlights/atom-one-light.css","hash":"59084376be155d3a70c502ed4ca65c5cad33c2e5","modified":1603472215851},{"_id":"public/css/highlights/brown-paper.css","hash":"f5d04e82893e7b18d0eb565970c5f9d8fb5ca923","modified":1603472215851},{"_id":"public/css/highlights/codepen-embed.css","hash":"2f43c960222180e27e85c0472cc19eb4942ce72c","modified":1603472215851},{"_id":"public/css/highlights/color-brewer.css","hash":"f6b37f80ce56edae7f501043859470331da012c4","modified":1603472215851},{"_id":"public/css/highlights/dark.css","hash":"eff983b17564572d3638742f933318bbef73da23","modified":1603472215851},{"_id":"public/css/highlights/docco.css","hash":"14717adc22a374db464fd0dc0df6b13774df0c52","modified":1603472215851},{"_id":"public/css/highlights/darkula.css","hash":"cf7b5912fb1993c4f26f9a62f0099ee1dbb4c18b","modified":1603472215851},{"_id":"public/css/highlights/dracula.css","hash":"38a97c1925ce909af702021fe0ee0a479290348e","modified":1603472215851},{"_id":"public/css/highlights/far.css","hash":"c996361cad354905eec71c90a9c864e205a9458f","modified":1603472215851},{"_id":"public/css/highlights/github-gist.css","hash":"5e8f24c0e196d544531b208ae7c04b2d34645601","modified":1603472215851},{"_id":"public/css/highlights/foundation.css","hash":"0092c37949a52be704f36608d892133cccd7ddb8","modified":1603472215851},{"_id":"public/css/highlights/github.css","hash":"108d8e13f8171de7633d28844ad9591293236431","modified":1603472215851},{"_id":"public/css/highlights/googlecode.css","hash":"d03d03dd80ed689bb7ef41603b3fa60c04d72783","modified":1603472215851},{"_id":"public/css/highlights/grayscale.css","hash":"59db0b1ec56334aa8ab7db63aef0691de530d827","modified":1603472215851},{"_id":"public/css/highlights/hopscotch.css","hash":"cdcdb932bbdd807c51cc7b3cf5c231871f206d6e","modified":1603472215851},{"_id":"public/css/highlights/highlightjs.css","hash":"09d164e19b612119cd83100d4935f6420fb3f073","modified":1603472215851},{"_id":"public/css/highlights/hybrid.css","hash":"6e4d44d6c3111c7879f6e7c07ba63f3a055ce1b3","modified":1603472215851},{"_id":"public/css/highlights/kimbie-dark.css","hash":"91d8ded52f6c5403142f7ae5d66438e0ab8b8eb6","modified":1603472215851},{"_id":"public/css/highlights/idea.css","hash":"82ffc1ed74c06519e951c27e2f7d0d933adec5fe","modified":1603472215851},{"_id":"public/css/highlights/ir-black.css","hash":"bd3d0ab8552853e91ffe150be16a99aeb88277a5","modified":1603472215851},{"_id":"public/css/highlights/kimbie-light.css","hash":"93af55cf912d90afd38a18e000275dbc541a2ad0","modified":1603472215851},{"_id":"public/css/highlights/magula.css","hash":"3b2cce885ecf2290cce77747bd83aa97f943dc9a","modified":1603472215851},{"_id":"public/css/highlights/mono-blue.css","hash":"e80091702c6f63cc1f83cfb5298eda6c1fff72df","modified":1603472215851},{"_id":"public/css/highlights/monokai-sublime.css","hash":"82f2d41f6e5816036d4cbf6c58788003041dde12","modified":1603472215851},{"_id":"public/css/highlights/monokai.css","hash":"89725e8da595c329b19f25b7c76fd269ba1b0798","modified":1603472215851},{"_id":"public/css/highlights/obsidian.css","hash":"64ec37c049eef23d70f09f49cbebb60e5eb1480b","modified":1603472215851},{"_id":"public/css/highlights/paraiso-dark.css","hash":"32e9207496270d2b22b33ed2c28e0f0e44ba4c9e","modified":1603472215851},{"_id":"public/css/highlights/paraiso-light.css","hash":"f16d81ab9066eb52c6827b7eb5c2232c6cfd39d5","modified":1603472215851},{"_id":"public/css/highlights/pojoaque.css","hash":"afc5a7a0c968a0cb0e2279d24412ee6874bcdc67","modified":1603472215851},{"_id":"public/css/highlights/railscasts.css","hash":"3db2f9bbc61398f2a2dce0c6cfb4ba31e00e20fc","modified":1603472215851},{"_id":"public/css/highlights/rainbow.css","hash":"b63461e39890d9e402ec45c9c189bffb49d863a0","modified":1603472215851},{"_id":"public/css/highlights/school-book.css","hash":"a782488eb2a092b54212e8b98e87a105ab9870f0","modified":1603472215851},{"_id":"public/css/highlights/solarized-dark.css","hash":"bc5162b4257142fa350e3d8c79be5c077bbb4c17","modified":1603472215851},{"_id":"public/css/highlights/solarized-light.css","hash":"9be12dd6b088976db66e7c0a8cf8976160b69bf9","modified":1603472215851},{"_id":"public/css/highlights/sunburst.css","hash":"8a452fb2b8986c2dbbdb01feadb3a69c4f612646","modified":1603472215851},{"_id":"public/css/highlights/tomorrow-night-blue.css","hash":"e16c62a43daa01a3a5eb53194b18b971f80a982f","modified":1603472215851},{"_id":"public/css/highlights/tomorrow-night-bright.css","hash":"931795398eec8ba8c1619f5de3bced638eb10533","modified":1603472215851},{"_id":"public/css/highlights/tomorrow-night-eighties.css","hash":"64d3ed62c1764789d63357dea417b2a5b3160ff8","modified":1603472215851},{"_id":"public/css/highlights/tomorrow-night.css","hash":"ddd91d22a390381374c88b3f929fe0489ae4e2b4","modified":1603472215851},{"_id":"public/css/highlights/tomorrow.css","hash":"0b35aca18ac1dcf043231aa94da7a648604886b8","modified":1603472215851},{"_id":"public/css/highlights/vs.css","hash":"603b5415ea3d7b1e4c5fcf6564c14f133817377f","modified":1603472215851},{"_id":"public/css/highlights/xcode.css","hash":"740c4fa9ef607c0b3a7914753d8d7cc509e638c0","modified":1603472215851},{"_id":"public/css/highlights/zenburn.css","hash":"f38220c13e6a664489c88a951244176c22233f55","modified":1603472215851},{"_id":"public/libs/font-awesome/README.html","hash":"3bfba863887e3c063795674fa0900ac1fffb3223","modified":1603472215851},{"_id":"public/libs/font-awesome/package.json","hash":"166a52895a194d9bacec7fbca5140c0fea5ce9d6","modified":1603472215851},{"_id":"public/libs/spoqa-han-sans-jp/README.html","hash":"1f38b078a283aa16eab90a8f0b558096cb237ee0","modified":1603472215851},{"_id":"public/libs/spoqa-han-sans-kr/README.html","hash":"1f38b078a283aa16eab90a8f0b558096cb237ee0","modified":1603472215851},{"_id":"public/libs/spoqa-han-sans-jp/css/SpoqaHanSans-jp.css","hash":"48b4649e4dfe408559f3d4a0cbdb4f459d73d7c4","modified":1603472215851},{"_id":"public/libs/spoqa-han-sans-kr/css/SpoqaHanSans-kr.css","hash":"a91f8aac14fabc4fac3f5c199b387629ed3cb254","modified":1603472215851},{"_id":"public/how-to-build-a-competitor-tracker-using-getscreenshot-and-cron-job-org/download-2.png","hash":"06ff6702ad8b7da1e8a83da7bcd85f6412498bd0","modified":1603472215851},{"_id":"public/css/index.css","hash":"2476c5f29fab9ef22e88150f237f75377e56e3d1","modified":1603472215851},{"_id":"public/libs/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1603472215851},{"_id":"public/libs/spoqa-han-sans-kr/fonts/SpoqaHanSans/SpoqaHanSansRegular.woff2","hash":"aa876da43e2b0ba89611289121cc635dcfab24c9","modified":1603472215851},{"_id":"public/libs/spoqa-han-sans-kr/fonts/SpoqaHanSans/SpoqaHanSansThin.woff2","hash":"808e1fa554205a785da397145686eb441186bd24","modified":1603472215851}],"Category":[{"name":"zapier","_id":"ckgmhyggt00027b9k132u5qmw"},{"name":"tutorial","_id":"ckgmhyggv00047b9keuyn66c8"},{"name":"puppeteer","_id":"ckgmhyggw00067b9k3og7g71o"}],"Data":[],"Page":[],"Post":[{"date":"2019-06-10T20:13:15.000Z","layout":"post","title":"Zapier Screenshots: How To Take Screenshots With Zapier","description":"In this post we explain how to take screenshots with Zapier by enabling the GetScreenshot integration. This is a guide to the missing zapier screenshot action.","_content":"\nZapier is an incredible service that allows automating a big range of tasks in reactive ways. By using the right Zaps, it's possible to automate boring or repetitive tasks and save time for your business.\n\nHowever, one missing service/layer is the ability to take screenshots of websites on demand or reacting to other events. This functionality can be a compelling automation workflow that can allow you to keep track of different things like Search Engine Result Positions (SERPs), your website, competitors' websites, status pages and many more. But that's just some ideas. With something like this, you could automate any workflow that requires you to look at a website daily.\n\nBecause we believe this can help people to automate many annoying things, we decided to create a Zapier integration that takes website screenshots. Simply put, this is the missing Zapier Screenshot Action. \n\nThe integration is very straightforward, you need to pass the URL  of a website and some optional parameters into the Zapier screenshot action, and then we will take the screenshot of that website. After taking the screenshot, is up to you to decide what to do with it. If you want the screenshot emailed to you can pass an email address, and we will send you the image to the provided email address. If you're going to do something else with another Zapier action, we can pass the screenshot URL to other selected or configured Zapier actions.\n\nGetScreenshot is only $5 a month, and you can take up to 2500 screenshots a month (that's a lot of screenshots).\n\nTo configure your GetScreenshot Zapier Screenshot Action, you need to follow these steps:\n \n1) Create a GetScreenshot account here: https://getscreenshot.rasterwise.com/\n\n2) Select the Lincoln Plan. That gives you plenty of screenshots (2500) for $5/month.\n\n3) You will receive an API Key in your email address.\n\n4) Activate our Zapier integration here:https://zapier.com/developer/public-invite/10567/26bbe5cfdfe92af3671f24d2228e9654/\n\n5) Once it's active, configure the action by providing the API key that was mailed to you.\n\n6) You're ready to start adding screenshots to your automation workflows 😃\n\nIf you have any other question about how to take screenshots with Zapier, Zapier screenshots workflows ideas or need help setting up the integration, please send us an email to support@rasterwise.com","source":"_posts/Zapier-Screenshots-How-To-Take-Screenshots-With-Zapier.md","raw":"---\ndate: 2019-06-10 15:13:15\nlayout: post\ntitle: 'Zapier Screenshots: How To Take Screenshots With Zapier'\ndescription: In this post we explain how to take screenshots with Zapier by enabling the GetScreenshot integration. This is a guide to the missing zapier screenshot action.\ncategories: \n- zapier\n---\n\nZapier is an incredible service that allows automating a big range of tasks in reactive ways. By using the right Zaps, it's possible to automate boring or repetitive tasks and save time for your business.\n\nHowever, one missing service/layer is the ability to take screenshots of websites on demand or reacting to other events. This functionality can be a compelling automation workflow that can allow you to keep track of different things like Search Engine Result Positions (SERPs), your website, competitors' websites, status pages and many more. But that's just some ideas. With something like this, you could automate any workflow that requires you to look at a website daily.\n\nBecause we believe this can help people to automate many annoying things, we decided to create a Zapier integration that takes website screenshots. Simply put, this is the missing Zapier Screenshot Action. \n\nThe integration is very straightforward, you need to pass the URL  of a website and some optional parameters into the Zapier screenshot action, and then we will take the screenshot of that website. After taking the screenshot, is up to you to decide what to do with it. If you want the screenshot emailed to you can pass an email address, and we will send you the image to the provided email address. If you're going to do something else with another Zapier action, we can pass the screenshot URL to other selected or configured Zapier actions.\n\nGetScreenshot is only $5 a month, and you can take up to 2500 screenshots a month (that's a lot of screenshots).\n\nTo configure your GetScreenshot Zapier Screenshot Action, you need to follow these steps:\n \n1) Create a GetScreenshot account here: https://getscreenshot.rasterwise.com/\n\n2) Select the Lincoln Plan. That gives you plenty of screenshots (2500) for $5/month.\n\n3) You will receive an API Key in your email address.\n\n4) Activate our Zapier integration here:https://zapier.com/developer/public-invite/10567/26bbe5cfdfe92af3671f24d2228e9654/\n\n5) Once it's active, configure the action by providing the API key that was mailed to you.\n\n6) You're ready to start adding screenshots to your automation workflows 😃\n\nIf you have any other question about how to take screenshots with Zapier, Zapier screenshots workflows ideas or need help setting up the integration, please send us an email to support@rasterwise.com","slug":"Zapier-Screenshots-How-To-Take-Screenshots-With-Zapier","published":1,"updated":"2019-06-10T20:19:33.000Z","comments":1,"photos":[],"link":"","_id":"ckgmhyggn00007b9kdtnpeau0","content":"<p>Zapier is an incredible service that allows automating a big range of tasks in reactive ways. By using the right Zaps, it's possible to automate boring or repetitive tasks and save time for your business.</p>\n<p>However, one missing service/layer is the ability to take screenshots of websites on demand or reacting to other events. This functionality can be a compelling automation workflow that can allow you to keep track of different things like Search Engine Result Positions (SERPs), your website, competitors' websites, status pages and many more. But that's just some ideas. With something like this, you could automate any workflow that requires you to look at a website daily.</p>\n<p>Because we believe this can help people to automate many annoying things, we decided to create a Zapier integration that takes website screenshots. Simply put, this is the missing Zapier Screenshot Action.</p>\n<p>The integration is very straightforward, you need to pass the URL  of a website and some optional parameters into the Zapier screenshot action, and then we will take the screenshot of that website. After taking the screenshot, is up to you to decide what to do with it. If you want the screenshot emailed to you can pass an email address, and we will send you the image to the provided email address. If you're going to do something else with another Zapier action, we can pass the screenshot URL to other selected or configured Zapier actions.</p>\n<p>GetScreenshot is only $5 a month, and you can take up to 2500 screenshots a month (that's a lot of screenshots).</p>\n<p>To configure your GetScreenshot Zapier Screenshot Action, you need to follow these steps:</p>\n<ol>\n<li>\n<p>Create a GetScreenshot account here: https://getscreenshot.rasterwise.com/</p>\n</li>\n<li>\n<p>Select the Lincoln Plan. That gives you plenty of screenshots (2500) for $5/month.</p>\n</li>\n<li>\n<p>You will receive an API Key in your email address.</p>\n</li>\n<li>\n<p>Activate our Zapier integration here:https://zapier.com/developer/public-invite/10567/26bbe5cfdfe92af3671f24d2228e9654/</p>\n</li>\n<li>\n<p>Once it's active, configure the action by providing the API key that was mailed to you.</p>\n</li>\n<li>\n<p>You're ready to start adding screenshots to your automation workflows 😃</p>\n</li>\n</ol>\n<p>If you have any other question about how to take screenshots with Zapier, Zapier screenshots workflows ideas or need help setting up the integration, please send us an email to support@rasterwise.com</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Zapier is an incredible service that allows automating a big range of tasks in reactive ways. By using the right Zaps, it's possible to automate boring or repetitive tasks and save time for your business.</p>\n<p>However, one missing service/layer is the ability to take screenshots of websites on demand or reacting to other events. This functionality can be a compelling automation workflow that can allow you to keep track of different things like Search Engine Result Positions (SERPs), your website, competitors' websites, status pages and many more. But that's just some ideas. With something like this, you could automate any workflow that requires you to look at a website daily.</p>\n<p>Because we believe this can help people to automate many annoying things, we decided to create a Zapier integration that takes website screenshots. Simply put, this is the missing Zapier Screenshot Action.</p>\n<p>The integration is very straightforward, you need to pass the URL  of a website and some optional parameters into the Zapier screenshot action, and then we will take the screenshot of that website. After taking the screenshot, is up to you to decide what to do with it. If you want the screenshot emailed to you can pass an email address, and we will send you the image to the provided email address. If you're going to do something else with another Zapier action, we can pass the screenshot URL to other selected or configured Zapier actions.</p>\n<p>GetScreenshot is only $5 a month, and you can take up to 2500 screenshots a month (that's a lot of screenshots).</p>\n<p>To configure your GetScreenshot Zapier Screenshot Action, you need to follow these steps:</p>\n<ol>\n<li>\n<p>Create a GetScreenshot account here: https://getscreenshot.rasterwise.com/</p>\n</li>\n<li>\n<p>Select the Lincoln Plan. That gives you plenty of screenshots (2500) for $5/month.</p>\n</li>\n<li>\n<p>You will receive an API Key in your email address.</p>\n</li>\n<li>\n<p>Activate our Zapier integration here:https://zapier.com/developer/public-invite/10567/26bbe5cfdfe92af3671f24d2228e9654/</p>\n</li>\n<li>\n<p>Once it's active, configure the action by providing the API key that was mailed to you.</p>\n</li>\n<li>\n<p>You're ready to start adding screenshots to your automation workflows 😃</p>\n</li>\n</ol>\n<p>If you have any other question about how to take screenshots with Zapier, Zapier screenshots workflows ideas or need help setting up the integration, please send us an email to support@rasterwise.com</p>\n"},{"layout":"post","title":"How to build a competitor tracker using GetScreenshot and cron-job.org","description":"This tutorial explains how to build a periodical screenshot tracker, that allows you to get captures of your website or competitors websites and receive them in your email inbox.","date":"2019-02-25T02:10:59.000Z","_content":"\n### Getting Started\n\nIn this post, we will learn how to build a simple competitor tracker that will send you daily / weekly / monthly screenshots of competitors websites or any website that you periodically visit to track how it's changing. For example, App Store reviews pages or feeds with low activity. We will also briefly explore how a GET API call works and its key elements. This tutorial is for beginners. If you're familiar with APIs and development in general feel free to jump to the TL;DR part at the end.\n\n### Prerequisites\n\nTo build this tracker you will need a [GetScreenshot](https://getscreenshot.rasterwise.com/) Screenshot API key and a cron-job-org account. We will be using GetScreenshot built-in mail functionality to send the captures to your own email account.\n\nThe first thing you want to do is subscribing and obtaining a GetScreenshot API. GetScreenshot costs 5 USD a month. You will also need a cron-job-org account which is free.\n\nYou can get your GetScreenshot API Key [here](https://getscreenshot.rasterwise.com/); \nAnd get your cron-job-org account [here](https://cron-job.org/en/signup/).\n\n### Setting Up The API Call\n\nAfter you subscribe and get your API key you will need to compose and API query call that will be used as the backbone of your tracker. GetScreenshot API is a RESTful API with a very simple and minimal setup. It's basically a simple URL that takes in some pieces of information to give you back what you're requesting.\n\nFor the sake of this example we will assume that we want to screenshot the New York Times homepage on a daily basis. Here are the pieces that you will require to build the API call and adjust it to your screenshot needs:\n\n1) Base API URL: https://api.rasterwise.com\n2) API Key: You will receive this after subscribing.\n3) URL of Website you want to screenshot: Any URL you want to screenshot, in this case https://nytimes.com\n4) Email address where you want to receive the captures: Any email address like john.doe@example.com\n\nAdditionally you can add other pieces (parameters) to adjust the type of screenshot you're getting. You can learn more about this in the documentation but for now we will keep it simple.\n\nNow that we have all the pieces we can use them to compose the API call that will be used to screenshot the New York Times.\n\nOur final API call will look something like this\n\n`https://api.rasterwise.com/v1/get-screenshot?apikey=PUT_HERE_THE_KEY&url=https://nytimes.com&email=john.doe@example.com`\n\nIf you look closely this is just a composition of all the pieces. Basically the pattern is the following:\n\nBase API URL + `?apikey=` + API Key + `&url=` + URL of Website + `&email=` + Your Email Address.\n\nThere's one more extra step that we will need to do to adjust our API call and make it usable by cron-job-org. We need to encode the url parameter of the API call.\n\nTo do that you can to visit this [website](http://www.onlinewebtoolkit.com/url-encode-decode).\n\nWhere it says \"Type/Paste/Upload your URL for URI Encode\", paste all the URL you want to screenshot: \n`https://nytimes.com`\n\nThen copy the resulting encoded string which will look something like this:\n`https%3A%2F%2Fnytimes.com`\n\nAnd finally recompose the Base URL with the resulting encoded string. The final API call will look something like this:\n`https://api.rasterwise.com/v1/get-screenshot?apikey=PUT_HERE_THE_KEY&url=https%3A%2F%2Fnytimes.com&email=jjramirez.u@gmail.com`\n\nMake sure to save this URL, since we will need it in the cron-job-org step.\n\n\n#### Brief Explanation of GET API Calls \n> This is basically how RESTful APIs work. They are URLs that receive different types of calls. In this case we are making a GET call and we are passing the parameters to the API via query parameters which are small capsules like `&url=` that receive the information. When you make this call, then the server gets this information and proccess it to return back what you're asking for.\n\n---\n### Setting Up The Recurrent Task (a.k.a: Cron Job)\n\nNow that we have our API call ready is time to use it in cron-job-org. This service allows you to put a schedule and perform actions programatically. These actions are known as cron jobs. In this case, cron-job.org is going to make the API call that we just composed on a daily basis, just like if we were doing it from the browser. Every day we will receive an email with the attachment of a freshly taken screenshot.\n\nThe first thing you want to do is creating a cron-job-org free account. You can create it by visiting this [link](https://cron-job.org/en/signup/)\n\nAfter creating an account and logging in. Go to the cronjobs section.\n\n{% asset_img 'download1.png' cron-job-1 %}\n\nThen click create cronjob.\n\n{% asset_img 'download.png' cron-job-2 %}\n\nNow you have to pick a name. Then, where it says url, you need to paste the API call we composed at the beggining of this tutorial:\n\n{% asset_img 'download-2.png' cron-job-2 %}\n\nFinally in the schedule section, pick a schedule that fits your tracking needs and save the cronjob.\n\n{% asset_img 'download-3.png' cron-job-3 %}\n\nSuccess! At this point you should have a solid tracker that we will send periodic screenshots of any website directly into your inbox. You will notice that in the execution history section of cron-job-org, these call will show up as failed. You can actually ignore this. As long as you're getting the emails, they are actually succeeding.\n\nYou can replicate these steps to create as many trackers as you want and with whatever frequency you want. GetScreenshot gives you 2500 Screenshots a month, so you can build screenshot trackers for your co-workers and different projects.\n\n\n### TL;DR \n\n1) Using the GetScreenshot API, compose an API call that fits your screenshot needs. You will need to use the `email` parameter to recieve the screenshot on your inbox, but you can also use the webhook option to post to a custom endpoint like a Slack endpoint or an IFTTT endpoint. You can find all the details of the GetScreenshot API at getscreenshot.gitbook.io\n2) Encode the URL parameter since cron-job-org requires this.\n3) Sign-up for a cron-job.org account and create a cronjob that makes a call to the GetScreenshot API. In cron-job-org you can set the periodicity of the call to fit your needs.\n4) You should get the screenshots and its resulting operations at the time at which you set them in cron-job-org.","source":"_posts/how-to-build-a-ctracker.md","raw":"---\nlayout: post\ntitle: How to build a competitor tracker using GetScreenshot and cron-job.org\npermalink: how-to-build-a-competitor-tracker-using-getscreenshot-and-cron-job-org\ndescription: This tutorial explains how to build a periodical screenshot tracker, that allows you to get captures of your website or competitors websites and receive them in your email inbox.\ndate: 2019-02-24 20:10:59\ncategories: \n- tutorial\n\n---\n\n### Getting Started\n\nIn this post, we will learn how to build a simple competitor tracker that will send you daily / weekly / monthly screenshots of competitors websites or any website that you periodically visit to track how it's changing. For example, App Store reviews pages or feeds with low activity. We will also briefly explore how a GET API call works and its key elements. This tutorial is for beginners. If you're familiar with APIs and development in general feel free to jump to the TL;DR part at the end.\n\n### Prerequisites\n\nTo build this tracker you will need a [GetScreenshot](https://getscreenshot.rasterwise.com/) Screenshot API key and a cron-job-org account. We will be using GetScreenshot built-in mail functionality to send the captures to your own email account.\n\nThe first thing you want to do is subscribing and obtaining a GetScreenshot API. GetScreenshot costs 5 USD a month. You will also need a cron-job-org account which is free.\n\nYou can get your GetScreenshot API Key [here](https://getscreenshot.rasterwise.com/); \nAnd get your cron-job-org account [here](https://cron-job.org/en/signup/).\n\n### Setting Up The API Call\n\nAfter you subscribe and get your API key you will need to compose and API query call that will be used as the backbone of your tracker. GetScreenshot API is a RESTful API with a very simple and minimal setup. It's basically a simple URL that takes in some pieces of information to give you back what you're requesting.\n\nFor the sake of this example we will assume that we want to screenshot the New York Times homepage on a daily basis. Here are the pieces that you will require to build the API call and adjust it to your screenshot needs:\n\n1) Base API URL: https://api.rasterwise.com\n2) API Key: You will receive this after subscribing.\n3) URL of Website you want to screenshot: Any URL you want to screenshot, in this case https://nytimes.com\n4) Email address where you want to receive the captures: Any email address like john.doe@example.com\n\nAdditionally you can add other pieces (parameters) to adjust the type of screenshot you're getting. You can learn more about this in the documentation but for now we will keep it simple.\n\nNow that we have all the pieces we can use them to compose the API call that will be used to screenshot the New York Times.\n\nOur final API call will look something like this\n\n`https://api.rasterwise.com/v1/get-screenshot?apikey=PUT_HERE_THE_KEY&url=https://nytimes.com&email=john.doe@example.com`\n\nIf you look closely this is just a composition of all the pieces. Basically the pattern is the following:\n\nBase API URL + `?apikey=` + API Key + `&url=` + URL of Website + `&email=` + Your Email Address.\n\nThere's one more extra step that we will need to do to adjust our API call and make it usable by cron-job-org. We need to encode the url parameter of the API call.\n\nTo do that you can to visit this [website](http://www.onlinewebtoolkit.com/url-encode-decode).\n\nWhere it says \"Type/Paste/Upload your URL for URI Encode\", paste all the URL you want to screenshot: \n`https://nytimes.com`\n\nThen copy the resulting encoded string which will look something like this:\n`https%3A%2F%2Fnytimes.com`\n\nAnd finally recompose the Base URL with the resulting encoded string. The final API call will look something like this:\n`https://api.rasterwise.com/v1/get-screenshot?apikey=PUT_HERE_THE_KEY&url=https%3A%2F%2Fnytimes.com&email=jjramirez.u@gmail.com`\n\nMake sure to save this URL, since we will need it in the cron-job-org step.\n\n\n#### Brief Explanation of GET API Calls \n> This is basically how RESTful APIs work. They are URLs that receive different types of calls. In this case we are making a GET call and we are passing the parameters to the API via query parameters which are small capsules like `&url=` that receive the information. When you make this call, then the server gets this information and proccess it to return back what you're asking for.\n\n---\n### Setting Up The Recurrent Task (a.k.a: Cron Job)\n\nNow that we have our API call ready is time to use it in cron-job-org. This service allows you to put a schedule and perform actions programatically. These actions are known as cron jobs. In this case, cron-job.org is going to make the API call that we just composed on a daily basis, just like if we were doing it from the browser. Every day we will receive an email with the attachment of a freshly taken screenshot.\n\nThe first thing you want to do is creating a cron-job-org free account. You can create it by visiting this [link](https://cron-job.org/en/signup/)\n\nAfter creating an account and logging in. Go to the cronjobs section.\n\n{% asset_img 'download1.png' cron-job-1 %}\n\nThen click create cronjob.\n\n{% asset_img 'download.png' cron-job-2 %}\n\nNow you have to pick a name. Then, where it says url, you need to paste the API call we composed at the beggining of this tutorial:\n\n{% asset_img 'download-2.png' cron-job-2 %}\n\nFinally in the schedule section, pick a schedule that fits your tracking needs and save the cronjob.\n\n{% asset_img 'download-3.png' cron-job-3 %}\n\nSuccess! At this point you should have a solid tracker that we will send periodic screenshots of any website directly into your inbox. You will notice that in the execution history section of cron-job-org, these call will show up as failed. You can actually ignore this. As long as you're getting the emails, they are actually succeeding.\n\nYou can replicate these steps to create as many trackers as you want and with whatever frequency you want. GetScreenshot gives you 2500 Screenshots a month, so you can build screenshot trackers for your co-workers and different projects.\n\n\n### TL;DR \n\n1) Using the GetScreenshot API, compose an API call that fits your screenshot needs. You will need to use the `email` parameter to recieve the screenshot on your inbox, but you can also use the webhook option to post to a custom endpoint like a Slack endpoint or an IFTTT endpoint. You can find all the details of the GetScreenshot API at getscreenshot.gitbook.io\n2) Encode the URL parameter since cron-job-org requires this.\n3) Sign-up for a cron-job.org account and create a cronjob that makes a call to the GetScreenshot API. In cron-job-org you can set the periodicity of the call to fit your needs.\n4) You should get the screenshots and its resulting operations at the time at which you set them in cron-job-org.","slug":"how-to-build-a-ctracker","published":1,"updated":"2020-10-23T16:41:32.538Z","__permalink":"how-to-build-a-competitor-tracker-using-getscreenshot-and-cron-job-org","comments":1,"photos":[],"link":"","_id":"ckgmhyggs00017b9k6540hkw9","content":"<h3>Getting Started</h3>\n<p>In this post, we will learn how to build a simple competitor tracker that will send you daily / weekly / monthly screenshots of competitors websites or any website that you periodically visit to track how it's changing. For example, App Store reviews pages or feeds with low activity. We will also briefly explore how a GET API call works and its key elements. This tutorial is for beginners. If you're familiar with APIs and development in general feel free to jump to the TL;DR part at the end.</p>\n<h3>Prerequisites</h3>\n<p>To build this tracker you will need a <a href=\"https://getscreenshot.rasterwise.com/\">GetScreenshot</a> Screenshot API key and a cron-job-org account. We will be using GetScreenshot built-in mail functionality to send the captures to your own email account.</p>\n<p>The first thing you want to do is subscribing and obtaining a GetScreenshot API. GetScreenshot costs 5 USD a month. You will also need a cron-job-org account which is free.</p>\n<p>You can get your GetScreenshot API Key <a href=\"https://getscreenshot.rasterwise.com/\">here</a>;\nAnd get your cron-job-org account <a href=\"https://cron-job.org/en/signup/\">here</a>.</p>\n<h3>Setting Up The API Call</h3>\n<p>After you subscribe and get your API key you will need to compose and API query call that will be used as the backbone of your tracker. GetScreenshot API is a RESTful API with a very simple and minimal setup. It's basically a simple URL that takes in some pieces of information to give you back what you're requesting.</p>\n<p>For the sake of this example we will assume that we want to screenshot the New York Times homepage on a daily basis. Here are the pieces that you will require to build the API call and adjust it to your screenshot needs:</p>\n<ol>\n<li>Base API URL: https://api.rasterwise.com</li>\n<li>API Key: You will receive this after subscribing.</li>\n<li>URL of Website you want to screenshot: Any URL you want to screenshot, in this case https://nytimes.com</li>\n<li>Email address where you want to receive the captures: Any email address like john.doe@example.com</li>\n</ol>\n<p>Additionally you can add other pieces (parameters) to adjust the type of screenshot you're getting. You can learn more about this in the documentation but for now we will keep it simple.</p>\n<p>Now that we have all the pieces we can use them to compose the API call that will be used to screenshot the New York Times.</p>\n<p>Our final API call will look something like this</p>\n<p><code>https://api.rasterwise.com/v1/get-screenshot?apikey=PUT_HERE_THE_KEY&amp;url=https://nytimes.com&amp;email=john.doe@example.com</code></p>\n<p>If you look closely this is just a composition of all the pieces. Basically the pattern is the following:</p>\n<p>Base API URL + <code>?apikey=</code> + API Key + <code>&amp;url=</code> + URL of Website + <code>&amp;email=</code> + Your Email Address.</p>\n<p>There's one more extra step that we will need to do to adjust our API call and make it usable by cron-job-org. We need to encode the url parameter of the API call.</p>\n<p>To do that you can to visit this <a href=\"http://www.onlinewebtoolkit.com/url-encode-decode\">website</a>.</p>\n<p>Where it says &quot;Type/Paste/Upload your URL for URI Encode&quot;, paste all the URL you want to screenshot:\n<code>https://nytimes.com</code></p>\n<p>Then copy the resulting encoded string which will look something like this:\n<code>https%3A%2F%2Fnytimes.com</code></p>\n<p>And finally recompose the Base URL with the resulting encoded string. The final API call will look something like this:\n<code>https://api.rasterwise.com/v1/get-screenshot?apikey=PUT_HERE_THE_KEY&amp;url=https%3A%2F%2Fnytimes.com&amp;email=jjramirez.u@gmail.com</code></p>\n<p>Make sure to save this URL, since we will need it in the cron-job-org step.</p>\n<h4>Brief Explanation of GET API Calls</h4>\n<blockquote>\n<p>This is basically how RESTful APIs work. They are URLs that receive different types of calls. In this case we are making a GET call and we are passing the parameters to the API via query parameters which are small capsules like <code>&amp;url=</code> that receive the information. When you make this call, then the server gets this information and proccess it to return back what you're asking for.</p>\n</blockquote>\n<hr>\n<h3>Setting Up The Recurrent Task (a.k.a: Cron Job)</h3>\n<p>Now that we have our API call ready is time to use it in cron-job-org. This service allows you to put a schedule and perform actions programatically. These actions are known as cron jobs. In this case, cron-job.org is going to make the API call that we just composed on a daily basis, just like if we were doing it from the browser. Every day we will receive an email with the attachment of a freshly taken screenshot.</p>\n<p>The first thing you want to do is creating a cron-job-org free account. You can create it by visiting this <a href=\"https://cron-job.org/en/signup/\">link</a></p>\n<p>After creating an account and logging in. Go to the cronjobs section.</p>\n<p><img src=\"/how-to-build-a-competitor-tracker-using-getscreenshot-and-cron-job-org/download1.png\" class=\"\" title=\"cron-job-1\"></p>\n<p>Then click create cronjob.</p>\n<p><img src=\"/how-to-build-a-competitor-tracker-using-getscreenshot-and-cron-job-org/download.png\" class=\"\" title=\"cron-job-2\"></p>\n<p>Now you have to pick a name. Then, where it says url, you need to paste the API call we composed at the beggining of this tutorial:</p>\n<p><img src=\"/how-to-build-a-competitor-tracker-using-getscreenshot-and-cron-job-org/download-2.png\" class=\"\" title=\"cron-job-2\"></p>\n<p>Finally in the schedule section, pick a schedule that fits your tracking needs and save the cronjob.</p>\n<p><img src=\"/how-to-build-a-competitor-tracker-using-getscreenshot-and-cron-job-org/download-3.png\" class=\"\" title=\"cron-job-3\"></p>\n<p>Success! At this point you should have a solid tracker that we will send periodic screenshots of any website directly into your inbox. You will notice that in the execution history section of cron-job-org, these call will show up as failed. You can actually ignore this. As long as you're getting the emails, they are actually succeeding.</p>\n<p>You can replicate these steps to create as many trackers as you want and with whatever frequency you want. GetScreenshot gives you 2500 Screenshots a month, so you can build screenshot trackers for your co-workers and different projects.</p>\n<h3>TL;DR</h3>\n<ol>\n<li>Using the GetScreenshot API, compose an API call that fits your screenshot needs. You will need to use the <code>email</code> parameter to recieve the screenshot on your inbox, but you can also use the webhook option to post to a custom endpoint like a Slack endpoint or an IFTTT endpoint. You can find all the details of the GetScreenshot API at getscreenshot.gitbook.io</li>\n<li>Encode the URL parameter since cron-job-org requires this.</li>\n<li>Sign-up for a cron-job.org account and create a cronjob that makes a call to the GetScreenshot API. In cron-job-org you can set the periodicity of the call to fit your needs.</li>\n<li>You should get the screenshots and its resulting operations at the time at which you set them in cron-job-org.</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h3>Getting Started</h3>\n<p>In this post, we will learn how to build a simple competitor tracker that will send you daily / weekly / monthly screenshots of competitors websites or any website that you periodically visit to track how it's changing. For example, App Store reviews pages or feeds with low activity. We will also briefly explore how a GET API call works and its key elements. This tutorial is for beginners. If you're familiar with APIs and development in general feel free to jump to the TL;DR part at the end.</p>\n<h3>Prerequisites</h3>\n<p>To build this tracker you will need a <a href=\"https://getscreenshot.rasterwise.com/\">GetScreenshot</a> Screenshot API key and a cron-job-org account. We will be using GetScreenshot built-in mail functionality to send the captures to your own email account.</p>\n<p>The first thing you want to do is subscribing and obtaining a GetScreenshot API. GetScreenshot costs 5 USD a month. You will also need a cron-job-org account which is free.</p>\n<p>You can get your GetScreenshot API Key <a href=\"https://getscreenshot.rasterwise.com/\">here</a>;\nAnd get your cron-job-org account <a href=\"https://cron-job.org/en/signup/\">here</a>.</p>\n<h3>Setting Up The API Call</h3>\n<p>After you subscribe and get your API key you will need to compose and API query call that will be used as the backbone of your tracker. GetScreenshot API is a RESTful API with a very simple and minimal setup. It's basically a simple URL that takes in some pieces of information to give you back what you're requesting.</p>\n<p>For the sake of this example we will assume that we want to screenshot the New York Times homepage on a daily basis. Here are the pieces that you will require to build the API call and adjust it to your screenshot needs:</p>\n<ol>\n<li>Base API URL: https://api.rasterwise.com</li>\n<li>API Key: You will receive this after subscribing.</li>\n<li>URL of Website you want to screenshot: Any URL you want to screenshot, in this case https://nytimes.com</li>\n<li>Email address where you want to receive the captures: Any email address like john.doe@example.com</li>\n</ol>\n<p>Additionally you can add other pieces (parameters) to adjust the type of screenshot you're getting. You can learn more about this in the documentation but for now we will keep it simple.</p>\n<p>Now that we have all the pieces we can use them to compose the API call that will be used to screenshot the New York Times.</p>\n<p>Our final API call will look something like this</p>\n<p><code>https://api.rasterwise.com/v1/get-screenshot?apikey=PUT_HERE_THE_KEY&amp;url=https://nytimes.com&amp;email=john.doe@example.com</code></p>\n<p>If you look closely this is just a composition of all the pieces. Basically the pattern is the following:</p>\n<p>Base API URL + <code>?apikey=</code> + API Key + <code>&amp;url=</code> + URL of Website + <code>&amp;email=</code> + Your Email Address.</p>\n<p>There's one more extra step that we will need to do to adjust our API call and make it usable by cron-job-org. We need to encode the url parameter of the API call.</p>\n<p>To do that you can to visit this <a href=\"http://www.onlinewebtoolkit.com/url-encode-decode\">website</a>.</p>\n<p>Where it says &quot;Type/Paste/Upload your URL for URI Encode&quot;, paste all the URL you want to screenshot:\n<code>https://nytimes.com</code></p>\n<p>Then copy the resulting encoded string which will look something like this:\n<code>https%3A%2F%2Fnytimes.com</code></p>\n<p>And finally recompose the Base URL with the resulting encoded string. The final API call will look something like this:\n<code>https://api.rasterwise.com/v1/get-screenshot?apikey=PUT_HERE_THE_KEY&amp;url=https%3A%2F%2Fnytimes.com&amp;email=jjramirez.u@gmail.com</code></p>\n<p>Make sure to save this URL, since we will need it in the cron-job-org step.</p>\n<h4>Brief Explanation of GET API Calls</h4>\n<blockquote>\n<p>This is basically how RESTful APIs work. They are URLs that receive different types of calls. In this case we are making a GET call and we are passing the parameters to the API via query parameters which are small capsules like <code>&amp;url=</code> that receive the information. When you make this call, then the server gets this information and proccess it to return back what you're asking for.</p>\n</blockquote>\n<hr>\n<h3>Setting Up The Recurrent Task (a.k.a: Cron Job)</h3>\n<p>Now that we have our API call ready is time to use it in cron-job-org. This service allows you to put a schedule and perform actions programatically. These actions are known as cron jobs. In this case, cron-job.org is going to make the API call that we just composed on a daily basis, just like if we were doing it from the browser. Every day we will receive an email with the attachment of a freshly taken screenshot.</p>\n<p>The first thing you want to do is creating a cron-job-org free account. You can create it by visiting this <a href=\"https://cron-job.org/en/signup/\">link</a></p>\n<p>After creating an account and logging in. Go to the cronjobs section.</p>\n<p><img src=\"/how-to-build-a-competitor-tracker-using-getscreenshot-and-cron-job-org/download1.png\" class=\"\" title=\"cron-job-1\"></p>\n<p>Then click create cronjob.</p>\n<p><img src=\"/how-to-build-a-competitor-tracker-using-getscreenshot-and-cron-job-org/download.png\" class=\"\" title=\"cron-job-2\"></p>\n<p>Now you have to pick a name. Then, where it says url, you need to paste the API call we composed at the beggining of this tutorial:</p>\n<p><img src=\"/how-to-build-a-competitor-tracker-using-getscreenshot-and-cron-job-org/download-2.png\" class=\"\" title=\"cron-job-2\"></p>\n<p>Finally in the schedule section, pick a schedule that fits your tracking needs and save the cronjob.</p>\n<p><img src=\"/how-to-build-a-competitor-tracker-using-getscreenshot-and-cron-job-org/download-3.png\" class=\"\" title=\"cron-job-3\"></p>\n<p>Success! At this point you should have a solid tracker that we will send periodic screenshots of any website directly into your inbox. You will notice that in the execution history section of cron-job-org, these call will show up as failed. You can actually ignore this. As long as you're getting the emails, they are actually succeeding.</p>\n<p>You can replicate these steps to create as many trackers as you want and with whatever frequency you want. GetScreenshot gives you 2500 Screenshots a month, so you can build screenshot trackers for your co-workers and different projects.</p>\n<h3>TL;DR</h3>\n<ol>\n<li>Using the GetScreenshot API, compose an API call that fits your screenshot needs. You will need to use the <code>email</code> parameter to recieve the screenshot on your inbox, but you can also use the webhook option to post to a custom endpoint like a Slack endpoint or an IFTTT endpoint. You can find all the details of the GetScreenshot API at getscreenshot.gitbook.io</li>\n<li>Encode the URL parameter since cron-job-org requires this.</li>\n<li>Sign-up for a cron-job.org account and create a cronjob that makes a call to the GetScreenshot API. In cron-job-org you can set the periodicity of the call to fit your needs.</li>\n<li>You should get the screenshots and its resulting operations at the time at which you set them in cron-job-org.</li>\n</ol>\n"},{"layout":"post","title":"Why you shouldn't build your own Puppeteer Screenshot API Solution","description":"In this post we explain why building your own Puppeteer Screenshot API Solution could be inefficient and why you should consider a managed solution.","date":"2019-02-27T03:19:04.000Z","_content":"\n{% asset_img 'download.png' puppeteer-screenshot-api %}\n\nPuppeteer is very quickly becoming the default solution that most developers choose to build web testing architecture for their apps. It's also becoming a very popular option to build parsers and services that depend on emulating browser sessions. One reason for Puppeteer's rising popularity is that until now most headless browser solutions weren't officially backed by browser vendors. Since Puppeeteer is the official Chrome headless browser solution by Google, it's not hard to understand why many developers are considering it over other popular solutions like Selenium and PhantomJS (officially abandoned/suspended). \n\nOne popular use case for headless browsers is programatically taking screenshots of websites at certain points of the development process, like after deploy to a staging or production environment. \n\nMany companies also use headless browsers to [take screenshots of competitor websites](https://blog.rasterwise.com/2019/02/24/how-to-build-a-competitor-tracker-using-getscreenshot-and-cron-job-org/) and landing pages, or to track web properties like app store profiles and search results.\n\nWhatever is the use case you might have to look for a programmatical web screenshot API, there's a high probability that you're considering Puppeteer to build this functionality. Not only Puppeteer offers an excellent and simple API that easily allows to trigger screenshot captures, but it also offers a comprehensive documentation and engaged community and development team.\n\nHowever, building these solutions in-house not always make sense and usually implementing these systems can become an area where development resources are wasted, especially if your specialty is not building testing architecture and optimizing browser technologies.\n\nIf you're decision maker whose job is to optimize your development costs and optimizing the efficiency of your development team (or your own efficiency), keep reading. Here are three  important reasons why building your own puppeteer screenshot api solution is not always the smartest decision.\n\n\n### Using Puppeteer is easy but is hard to make it work the right way.\n\nWriting your own service on top of Puppeteer is usually not that hard. Puppeteer just requires a NodeJS runtime and a simple script with Async/Await JavaScript calls to execute different actions like setting up viewport sizes, hitting key strokes or capturing the loaded content. That's the easy part. However as you start digging more into your particular case you will quickly find out that Puppeteer is a very finicky machine that not always behaves as expected.\n\nThe default example found in Puppeteer's documentation only works for very simple websites and screenshots scenarios. In the practice you will find that you need to tweak the execution order of the action, add different logic to handle animations, add random waits and scroll operations to trigger lazy-loaded content, and more weird execution caveats. In general, Puppeteer requires you to constantly tweak different settings to capture specific rendering scenarions.\n\nIf you don't want to spend countless hours tweaking a script, writing your own implementation might not be a good option for you.\n\n\n### Puppeteer needs its own infrastructure.\n\nIf you're planning to write a semi-useful screenshot utility for your company or yourself you will quickly realize that you need to run this somewhere. Amazon EC2? Amazon ECS? Digital Ocean Droplet? Google GCE? Heroku App? A Linux Machine in the janitorial closet?\n\nWhatever is that you end up choosing, this is going to be extra infrastructure that needs to be provided, measured, mantained, secured and billed. If there's anything that the cloud has taught us so far, is that spinning new resources for random small utilities is not an efficient way of spending development resources. But even if you manage to provision architecture for your small application in a contained and cheap way, you will still need to deal with other issues like securing your application and exposing it to your core app in a consumable way. \n\nThis is too much overhead for a particular and narrow use case.\n\n\n### Developing non-core solutions is a money waster\n\nWhen you spend time in areas that are not the core of your product, you're actually being financially inefficient. Taking screenshots is likely not a core task of your business so it doesn't makes much sense to waste development resources in this area.\n\nHere is a brief example of how inefficient it gets:\n\nA mid-level developer in a small market earns $90K USD per year, working 40 hours per week. His/her effective hour rate is: *$47 USD per hour*. \n\nWriting a basic implementation of a screenshot utility will take *at least 5 hours*. But this is just a simple prototype. Many use cases will need to be addressed, and there's likely going to be a large amount of time spent in optimizing, securing, provisioning, testing, etc. \n\nA realistic utility that can be used for a development workflow is going to take at the very least **30 hours** of development time, but likely more.\n\nOther un-accounted areas of development time are: documentation, training and mantainance.\n\nGiven this scenario is very likely that writing a semi-good solution will take **more than a week** and mantaining it, will take at least **an hour every month**.\nThis means that writing this solution will cost almost **$2000 USD of development time** plus another **$500 USD or so, just to support it every year**. And of course this doesn't include the cost of the infrastructure you're paying to run it.\n\n\n### So what's the alternative\n\nWe honestly believe that developers shouldn't waste their time and effort in building micro-utilities that don't serve the core of their product. That's why we build [GetScreenshot](https://getscreenshot.rasterwise.com/). We believe that spending +$2500 worth of development time and stress to build these kind of services simply doesn't make sense. Using a solution like GetScreenshot can cost you as little as 60 USD a year and it will give you a highly scalable and optimized screenshot Pupeeteer Screenshot API Solution. You focus on your app and we focus in providing you a reliable screenshot service.\n\nWe encourage you to [try us out](https://getscreenshot.rasterwise.com/), but even if you're not conviced with our service, we really think you should consider a managed solution to handle your screenshot operations. Not only you're off-loading all the complexities of writing and tweaking your solution, but also you're getting a predictable / affordable cost for something that shouldn't cost you that much in the first place.\n\nIf you're interested in trying out [GetScreenshot by Rasterwise](https://getscreenshot.rasterwise.com/) you can use this coupon (**FREEMONTH5**) to get the first month for free in the basic plan. Just go through the checkout and apply it at the end. Your credit card won't get charged. If you're curious about our implementation you can find more details in our [documentation](https://rasterwise.gitbook.io/docs/).\n\n","source":"_posts/why-you-shouldnt-build-your-own-puppeteer-screenshot.md","raw":"---\nlayout: post\ntitle: Why you shouldn't build your own Puppeteer Screenshot API Solution\npermalink: why-you-shouldnt-build-your-own-puppeteer-screenshot-api-solution\ndescription: In this post we explain why building your own Puppeteer Screenshot API Solution could be inefficient and why you should consider a managed solution.\ndate: 2019-02-26 21:19:04\ncategories: \n- puppeteer \n---\n\n{% asset_img 'download.png' puppeteer-screenshot-api %}\n\nPuppeteer is very quickly becoming the default solution that most developers choose to build web testing architecture for their apps. It's also becoming a very popular option to build parsers and services that depend on emulating browser sessions. One reason for Puppeteer's rising popularity is that until now most headless browser solutions weren't officially backed by browser vendors. Since Puppeeteer is the official Chrome headless browser solution by Google, it's not hard to understand why many developers are considering it over other popular solutions like Selenium and PhantomJS (officially abandoned/suspended). \n\nOne popular use case for headless browsers is programatically taking screenshots of websites at certain points of the development process, like after deploy to a staging or production environment. \n\nMany companies also use headless browsers to [take screenshots of competitor websites](https://blog.rasterwise.com/2019/02/24/how-to-build-a-competitor-tracker-using-getscreenshot-and-cron-job-org/) and landing pages, or to track web properties like app store profiles and search results.\n\nWhatever is the use case you might have to look for a programmatical web screenshot API, there's a high probability that you're considering Puppeteer to build this functionality. Not only Puppeteer offers an excellent and simple API that easily allows to trigger screenshot captures, but it also offers a comprehensive documentation and engaged community and development team.\n\nHowever, building these solutions in-house not always make sense and usually implementing these systems can become an area where development resources are wasted, especially if your specialty is not building testing architecture and optimizing browser technologies.\n\nIf you're decision maker whose job is to optimize your development costs and optimizing the efficiency of your development team (or your own efficiency), keep reading. Here are three  important reasons why building your own puppeteer screenshot api solution is not always the smartest decision.\n\n\n### Using Puppeteer is easy but is hard to make it work the right way.\n\nWriting your own service on top of Puppeteer is usually not that hard. Puppeteer just requires a NodeJS runtime and a simple script with Async/Await JavaScript calls to execute different actions like setting up viewport sizes, hitting key strokes or capturing the loaded content. That's the easy part. However as you start digging more into your particular case you will quickly find out that Puppeteer is a very finicky machine that not always behaves as expected.\n\nThe default example found in Puppeteer's documentation only works for very simple websites and screenshots scenarios. In the practice you will find that you need to tweak the execution order of the action, add different logic to handle animations, add random waits and scroll operations to trigger lazy-loaded content, and more weird execution caveats. In general, Puppeteer requires you to constantly tweak different settings to capture specific rendering scenarions.\n\nIf you don't want to spend countless hours tweaking a script, writing your own implementation might not be a good option for you.\n\n\n### Puppeteer needs its own infrastructure.\n\nIf you're planning to write a semi-useful screenshot utility for your company or yourself you will quickly realize that you need to run this somewhere. Amazon EC2? Amazon ECS? Digital Ocean Droplet? Google GCE? Heroku App? A Linux Machine in the janitorial closet?\n\nWhatever is that you end up choosing, this is going to be extra infrastructure that needs to be provided, measured, mantained, secured and billed. If there's anything that the cloud has taught us so far, is that spinning new resources for random small utilities is not an efficient way of spending development resources. But even if you manage to provision architecture for your small application in a contained and cheap way, you will still need to deal with other issues like securing your application and exposing it to your core app in a consumable way. \n\nThis is too much overhead for a particular and narrow use case.\n\n\n### Developing non-core solutions is a money waster\n\nWhen you spend time in areas that are not the core of your product, you're actually being financially inefficient. Taking screenshots is likely not a core task of your business so it doesn't makes much sense to waste development resources in this area.\n\nHere is a brief example of how inefficient it gets:\n\nA mid-level developer in a small market earns $90K USD per year, working 40 hours per week. His/her effective hour rate is: *$47 USD per hour*. \n\nWriting a basic implementation of a screenshot utility will take *at least 5 hours*. But this is just a simple prototype. Many use cases will need to be addressed, and there's likely going to be a large amount of time spent in optimizing, securing, provisioning, testing, etc. \n\nA realistic utility that can be used for a development workflow is going to take at the very least **30 hours** of development time, but likely more.\n\nOther un-accounted areas of development time are: documentation, training and mantainance.\n\nGiven this scenario is very likely that writing a semi-good solution will take **more than a week** and mantaining it, will take at least **an hour every month**.\nThis means that writing this solution will cost almost **$2000 USD of development time** plus another **$500 USD or so, just to support it every year**. And of course this doesn't include the cost of the infrastructure you're paying to run it.\n\n\n### So what's the alternative\n\nWe honestly believe that developers shouldn't waste their time and effort in building micro-utilities that don't serve the core of their product. That's why we build [GetScreenshot](https://getscreenshot.rasterwise.com/). We believe that spending +$2500 worth of development time and stress to build these kind of services simply doesn't make sense. Using a solution like GetScreenshot can cost you as little as 60 USD a year and it will give you a highly scalable and optimized screenshot Pupeeteer Screenshot API Solution. You focus on your app and we focus in providing you a reliable screenshot service.\n\nWe encourage you to [try us out](https://getscreenshot.rasterwise.com/), but even if you're not conviced with our service, we really think you should consider a managed solution to handle your screenshot operations. Not only you're off-loading all the complexities of writing and tweaking your solution, but also you're getting a predictable / affordable cost for something that shouldn't cost you that much in the first place.\n\nIf you're interested in trying out [GetScreenshot by Rasterwise](https://getscreenshot.rasterwise.com/) you can use this coupon (**FREEMONTH5**) to get the first month for free in the basic plan. Just go through the checkout and apply it at the end. Your credit card won't get charged. If you're curious about our implementation you can find more details in our [documentation](https://rasterwise.gitbook.io/docs/).\n\n","slug":"why-you-shouldnt-build-your-own-puppeteer-screenshot","published":1,"updated":"2019-02-27T07:28:48.000Z","__permalink":"why-you-shouldnt-build-your-own-puppeteer-screenshot-api-solution","comments":1,"photos":[],"link":"","_id":"ckgmhyggu00037b9k1m7ycipy","content":"<p><img src=\"/why-you-shouldnt-build-your-own-puppeteer-screenshot-api-solution/download.png\" class=\"\" title=\"puppeteer-screenshot-api\"></p>\n<p>Puppeteer is very quickly becoming the default solution that most developers choose to build web testing architecture for their apps. It's also becoming a very popular option to build parsers and services that depend on emulating browser sessions. One reason for Puppeteer's rising popularity is that until now most headless browser solutions weren't officially backed by browser vendors. Since Puppeeteer is the official Chrome headless browser solution by Google, it's not hard to understand why many developers are considering it over other popular solutions like Selenium and PhantomJS (officially abandoned/suspended).</p>\n<p>One popular use case for headless browsers is programatically taking screenshots of websites at certain points of the development process, like after deploy to a staging or production environment.</p>\n<p>Many companies also use headless browsers to <a href=\"https://blog.rasterwise.com/2019/02/24/how-to-build-a-competitor-tracker-using-getscreenshot-and-cron-job-org/\">take screenshots of competitor websites</a> and landing pages, or to track web properties like app store profiles and search results.</p>\n<p>Whatever is the use case you might have to look for a programmatical web screenshot API, there's a high probability that you're considering Puppeteer to build this functionality. Not only Puppeteer offers an excellent and simple API that easily allows to trigger screenshot captures, but it also offers a comprehensive documentation and engaged community and development team.</p>\n<p>However, building these solutions in-house not always make sense and usually implementing these systems can become an area where development resources are wasted, especially if your specialty is not building testing architecture and optimizing browser technologies.</p>\n<p>If you're decision maker whose job is to optimize your development costs and optimizing the efficiency of your development team (or your own efficiency), keep reading. Here are three  important reasons why building your own puppeteer screenshot api solution is not always the smartest decision.</p>\n<h3>Using Puppeteer is easy but is hard to make it work the right way.</h3>\n<p>Writing your own service on top of Puppeteer is usually not that hard. Puppeteer just requires a NodeJS runtime and a simple script with Async/Await JavaScript calls to execute different actions like setting up viewport sizes, hitting key strokes or capturing the loaded content. That's the easy part. However as you start digging more into your particular case you will quickly find out that Puppeteer is a very finicky machine that not always behaves as expected.</p>\n<p>The default example found in Puppeteer's documentation only works for very simple websites and screenshots scenarios. In the practice you will find that you need to tweak the execution order of the action, add different logic to handle animations, add random waits and scroll operations to trigger lazy-loaded content, and more weird execution caveats. In general, Puppeteer requires you to constantly tweak different settings to capture specific rendering scenarions.</p>\n<p>If you don't want to spend countless hours tweaking a script, writing your own implementation might not be a good option for you.</p>\n<h3>Puppeteer needs its own infrastructure.</h3>\n<p>If you're planning to write a semi-useful screenshot utility for your company or yourself you will quickly realize that you need to run this somewhere. Amazon EC2? Amazon ECS? Digital Ocean Droplet? Google GCE? Heroku App? A Linux Machine in the janitorial closet?</p>\n<p>Whatever is that you end up choosing, this is going to be extra infrastructure that needs to be provided, measured, mantained, secured and billed. If there's anything that the cloud has taught us so far, is that spinning new resources for random small utilities is not an efficient way of spending development resources. But even if you manage to provision architecture for your small application in a contained and cheap way, you will still need to deal with other issues like securing your application and exposing it to your core app in a consumable way.</p>\n<p>This is too much overhead for a particular and narrow use case.</p>\n<h3>Developing non-core solutions is a money waster</h3>\n<p>When you spend time in areas that are not the core of your product, you're actually being financially inefficient. Taking screenshots is likely not a core task of your business so it doesn't makes much sense to waste development resources in this area.</p>\n<p>Here is a brief example of how inefficient it gets:</p>\n<p>A mid-level developer in a small market earns $90K USD per year, working 40 hours per week. His/her effective hour rate is: <em>$47 USD per hour</em>.</p>\n<p>Writing a basic implementation of a screenshot utility will take <em>at least 5 hours</em>. But this is just a simple prototype. Many use cases will need to be addressed, and there's likely going to be a large amount of time spent in optimizing, securing, provisioning, testing, etc.</p>\n<p>A realistic utility that can be used for a development workflow is going to take at the very least <strong>30 hours</strong> of development time, but likely more.</p>\n<p>Other un-accounted areas of development time are: documentation, training and mantainance.</p>\n<p>Given this scenario is very likely that writing a semi-good solution will take <strong>more than a week</strong> and mantaining it, will take at least <strong>an hour every month</strong>.\nThis means that writing this solution will cost almost <strong>$2000 USD of development time</strong> plus another <strong>$500 USD or so, just to support it every year</strong>. And of course this doesn't include the cost of the infrastructure you're paying to run it.</p>\n<h3>So what's the alternative</h3>\n<p>We honestly believe that developers shouldn't waste their time and effort in building micro-utilities that don't serve the core of their product. That's why we build <a href=\"https://getscreenshot.rasterwise.com/\">GetScreenshot</a>. We believe that spending +$2500 worth of development time and stress to build these kind of services simply doesn't make sense. Using a solution like GetScreenshot can cost you as little as 60 USD a year and it will give you a highly scalable and optimized screenshot Pupeeteer Screenshot API Solution. You focus on your app and we focus in providing you a reliable screenshot service.</p>\n<p>We encourage you to <a href=\"https://getscreenshot.rasterwise.com/\">try us out</a>, but even if you're not conviced with our service, we really think you should consider a managed solution to handle your screenshot operations. Not only you're off-loading all the complexities of writing and tweaking your solution, but also you're getting a predictable / affordable cost for something that shouldn't cost you that much in the first place.</p>\n<p>If you're interested in trying out <a href=\"https://getscreenshot.rasterwise.com/\">GetScreenshot by Rasterwise</a> you can use this coupon (<strong>FREEMONTH5</strong>) to get the first month for free in the basic plan. Just go through the checkout and apply it at the end. Your credit card won't get charged. If you're curious about our implementation you can find more details in our <a href=\"https://rasterwise.gitbook.io/docs/\">documentation</a>.</p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"/why-you-shouldnt-build-your-own-puppeteer-screenshot-api-solution/download.png\" class=\"\" title=\"puppeteer-screenshot-api\"></p>\n<p>Puppeteer is very quickly becoming the default solution that most developers choose to build web testing architecture for their apps. It's also becoming a very popular option to build parsers and services that depend on emulating browser sessions. One reason for Puppeteer's rising popularity is that until now most headless browser solutions weren't officially backed by browser vendors. Since Puppeeteer is the official Chrome headless browser solution by Google, it's not hard to understand why many developers are considering it over other popular solutions like Selenium and PhantomJS (officially abandoned/suspended).</p>\n<p>One popular use case for headless browsers is programatically taking screenshots of websites at certain points of the development process, like after deploy to a staging or production environment.</p>\n<p>Many companies also use headless browsers to <a href=\"https://blog.rasterwise.com/2019/02/24/how-to-build-a-competitor-tracker-using-getscreenshot-and-cron-job-org/\">take screenshots of competitor websites</a> and landing pages, or to track web properties like app store profiles and search results.</p>\n<p>Whatever is the use case you might have to look for a programmatical web screenshot API, there's a high probability that you're considering Puppeteer to build this functionality. Not only Puppeteer offers an excellent and simple API that easily allows to trigger screenshot captures, but it also offers a comprehensive documentation and engaged community and development team.</p>\n<p>However, building these solutions in-house not always make sense and usually implementing these systems can become an area where development resources are wasted, especially if your specialty is not building testing architecture and optimizing browser technologies.</p>\n<p>If you're decision maker whose job is to optimize your development costs and optimizing the efficiency of your development team (or your own efficiency), keep reading. Here are three  important reasons why building your own puppeteer screenshot api solution is not always the smartest decision.</p>\n<h3>Using Puppeteer is easy but is hard to make it work the right way.</h3>\n<p>Writing your own service on top of Puppeteer is usually not that hard. Puppeteer just requires a NodeJS runtime and a simple script with Async/Await JavaScript calls to execute different actions like setting up viewport sizes, hitting key strokes or capturing the loaded content. That's the easy part. However as you start digging more into your particular case you will quickly find out that Puppeteer is a very finicky machine that not always behaves as expected.</p>\n<p>The default example found in Puppeteer's documentation only works for very simple websites and screenshots scenarios. In the practice you will find that you need to tweak the execution order of the action, add different logic to handle animations, add random waits and scroll operations to trigger lazy-loaded content, and more weird execution caveats. In general, Puppeteer requires you to constantly tweak different settings to capture specific rendering scenarions.</p>\n<p>If you don't want to spend countless hours tweaking a script, writing your own implementation might not be a good option for you.</p>\n<h3>Puppeteer needs its own infrastructure.</h3>\n<p>If you're planning to write a semi-useful screenshot utility for your company or yourself you will quickly realize that you need to run this somewhere. Amazon EC2? Amazon ECS? Digital Ocean Droplet? Google GCE? Heroku App? A Linux Machine in the janitorial closet?</p>\n<p>Whatever is that you end up choosing, this is going to be extra infrastructure that needs to be provided, measured, mantained, secured and billed. If there's anything that the cloud has taught us so far, is that spinning new resources for random small utilities is not an efficient way of spending development resources. But even if you manage to provision architecture for your small application in a contained and cheap way, you will still need to deal with other issues like securing your application and exposing it to your core app in a consumable way.</p>\n<p>This is too much overhead for a particular and narrow use case.</p>\n<h3>Developing non-core solutions is a money waster</h3>\n<p>When you spend time in areas that are not the core of your product, you're actually being financially inefficient. Taking screenshots is likely not a core task of your business so it doesn't makes much sense to waste development resources in this area.</p>\n<p>Here is a brief example of how inefficient it gets:</p>\n<p>A mid-level developer in a small market earns $90K USD per year, working 40 hours per week. His/her effective hour rate is: <em>$47 USD per hour</em>.</p>\n<p>Writing a basic implementation of a screenshot utility will take <em>at least 5 hours</em>. But this is just a simple prototype. Many use cases will need to be addressed, and there's likely going to be a large amount of time spent in optimizing, securing, provisioning, testing, etc.</p>\n<p>A realistic utility that can be used for a development workflow is going to take at the very least <strong>30 hours</strong> of development time, but likely more.</p>\n<p>Other un-accounted areas of development time are: documentation, training and mantainance.</p>\n<p>Given this scenario is very likely that writing a semi-good solution will take <strong>more than a week</strong> and mantaining it, will take at least <strong>an hour every month</strong>.\nThis means that writing this solution will cost almost <strong>$2000 USD of development time</strong> plus another <strong>$500 USD or so, just to support it every year</strong>. And of course this doesn't include the cost of the infrastructure you're paying to run it.</p>\n<h3>So what's the alternative</h3>\n<p>We honestly believe that developers shouldn't waste their time and effort in building micro-utilities that don't serve the core of their product. That's why we build <a href=\"https://getscreenshot.rasterwise.com/\">GetScreenshot</a>. We believe that spending +$2500 worth of development time and stress to build these kind of services simply doesn't make sense. Using a solution like GetScreenshot can cost you as little as 60 USD a year and it will give you a highly scalable and optimized screenshot Pupeeteer Screenshot API Solution. You focus on your app and we focus in providing you a reliable screenshot service.</p>\n<p>We encourage you to <a href=\"https://getscreenshot.rasterwise.com/\">try us out</a>, but even if you're not conviced with our service, we really think you should consider a managed solution to handle your screenshot operations. Not only you're off-loading all the complexities of writing and tweaking your solution, but also you're getting a predictable / affordable cost for something that shouldn't cost you that much in the first place.</p>\n<p>If you're interested in trying out <a href=\"https://getscreenshot.rasterwise.com/\">GetScreenshot by Rasterwise</a> you can use this coupon (<strong>FREEMONTH5</strong>) to get the first month for free in the basic plan. Just go through the checkout and apply it at the end. Your credit card won't get charged. If you're curious about our implementation you can find more details in our <a href=\"https://rasterwise.gitbook.io/docs/\">documentation</a>.</p>\n"}],"PostAsset":[{"_id":"source/_posts/how-to-build-a-ctracker/download-1.png","post":"ckgmhyggs00017b9k6540hkw9","slug":"download-1.png","modified":1,"renderable":1},{"_id":"source/_posts/how-to-build-a-ctracker/download-2.png","post":"ckgmhyggs00017b9k6540hkw9","slug":"download-2.png","modified":1,"renderable":1},{"_id":"source/_posts/how-to-build-a-ctracker/download-3.png","post":"ckgmhyggs00017b9k6540hkw9","slug":"download-3.png","modified":1,"renderable":1},{"_id":"source/_posts/how-to-build-a-ctracker/download.png","post":"ckgmhyggs00017b9k6540hkw9","slug":"download.png","modified":1,"renderable":1},{"_id":"source/_posts/how-to-build-a-ctracker/download1.png","post":"ckgmhyggs00017b9k6540hkw9","slug":"download1.png","modified":1,"renderable":1},{"_id":"source/_posts/why-you-shouldnt-build-your-own-puppeteer-screenshot/download.png","post":"ckgmhyggu00037b9k1m7ycipy","slug":"download.png","modified":1,"renderable":1}],"PostCategory":[{"post_id":"ckgmhyggn00007b9kdtnpeau0","category_id":"ckgmhyggt00027b9k132u5qmw","_id":"ckgmhyggw00057b9kdo3sag14"},{"post_id":"ckgmhyggs00017b9k6540hkw9","category_id":"ckgmhyggv00047b9keuyn66c8","_id":"ckgmhyggw00077b9k5q5b45fh"},{"post_id":"ckgmhyggu00037b9k1m7ycipy","category_id":"ckgmhyggw00067b9k3og7g71o","_id":"ckgmhyggw00087b9khs89cwef"}],"PostTag":[],"Tag":[]}}